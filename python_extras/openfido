#!/usr/local/bin/python3
"""OpenFIDO Command Line Interface (CLI)
"""

import sys, os, traceback, datetime, inspect

sys.path.append(".")
sys.path.append(os.getenv("HOME")+"/.openfido")
sys.path.append("/usr/local/bin")

import openfido

exit_code = 0

def poutput(msg,exit=None):
    """Print an output message

    Outputs messages regardless of quiet or verbose setting
    """
    print(msg,file=sys.stdout,flush=True)
    if exit:
        sys.exit(exit)

def pverbose(msg,exit=None):
    """Print a verbose output message

    Outputs messages if verbose is enabled
    """
    if config.verbose:
        print("  ...",msg,file=sys.stdout,flush=True)
    if exit:
        sys.exit(exit)

def pquiet(msg,exit=None):
    """Print a quiet output message

    Outputs messages if quiet is not enabled
    """
    if not config.quiet:
        print(msg,file=sys.stdout,flush=True)
    if exit:
        sys.exit(exit)

def pwarning(msg,exit=None):
    """Print a warning message

    Warning messages are suppressed by the quiet option
    """
    if not config.quiet:
        print(f'WARNING [openfido]: {msg}',file=sys.stderr,flush=True)
    if exit:
        sys.exit(exit)

def perror(msg,exit=None):
    """Print an error message

    Error messages are suppressed by the quiet option
    """
    if not config.quiet:
        print(f'ERROR [openfido]: {msg}',file=sys.stderr,flush=True)
    if exit:
        sys.exit(exit)
    else:
        global exit_code
        exit_code = 1

default_streams = { "output" :  poutput,
                    "warning" : pwarning,
                    "error" :   perror,
                    "verbose" : pverbose,
                    "quiet" :   pquiet,
                    }
                    

# openfido_config import
try: 
    import openfido_config as config
except:
    # default options
    class config:
        """Configuration options
        """
        verbose = False # print more messages as work is done
        quiet = False # print fewer messages as work is done
        orgname = "openfido" # default repo for workflows and pipelines
        branch = "main" # default branch to use when downloading workflows and pipelines
        cache = "/usr/local/share/gridlabd/openfido" # additional path for downloaded modules
        apiurl = "https://api.github.com"
        rawurl = "https://raw.githubusercontent.com"
        giturl = "https://github.com"
        traceback_file = "/dev/stderr"
        pass

# setup default streams
if not hasattr(config,"streams"):
    config.streams = {}
for name, value in default_streams.items():
    if not name in config.streams:
        config.streams[name] = value
    elif not callable(config.streams[name]):
        raise Exception(f"config.streams['{name}'] is not callable")

sys.path.append(config.cache)

# setup openfido
for key in dir(config):
    setattr(openfido,"key",getattr(config,key))

def main(*args):
    """gridlabd-openfido main function"""
    execname = args[0]
    n = 1
    while len(args) > n and args[n][0] == '-':
        if args[n] in ['-v','--verbose']:
            config.verbose = True
        elif args[n] in ['-q','--quiet']:
            config.quiet = True
        else:
            perror(f"command option '{args[n]}' is not valid")
        n += 1
    if len(args) > n:
        command = args[n]
        if len(sys.argv) > n+1:
            options = list(args[n+1:])
        else:
            options = []
    else:
        command = "help"
        options = []
    if hasattr(openfido,command):
        try:
            call = getattr(openfido,command)
            result = call(options=options,stream=config.streams)
            pverbose(result)
        except Exception as err:
            if hasattr(config,"traceback_file"):
                e_type, e_value, e_traceback = sys.exc_info()
                with open(config.traceback_file,"w") as fh:
                    print(datetime.datetime.now(),"[ERROR]:",err,file=fh)
                    frame = inspect.stack()[1]
                    print(f"  File \"{frame.filename}\", line {frame[0].f_lineno}, in __main__",file=fh)
                    print(f"    main(*args={args})",file=fh)
                    traceback.print_tb(e_traceback,limit=None,file=fh)
                    pverbose(f"traceback written to {config.traceback_file}")
            perror(err)
            pass
    else:
        perror(f"'{command}' is not a valid command",exit=1)

if __name__ == "__main__":
    main(*sys.argv)
    sys.exit(exit_code)
