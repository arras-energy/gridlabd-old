// this prevents the simulation from start a clock
#set compileonly=TRUE
#set warn=FALSE

// load the RECS data and calculate the floor area statistics
#begin python
import eia_recs, numpy
fips = eia_recs.Microdata.get_division("${region}")
codes = eia_recs.Microdata.get_codes(**fips)
recs = eia_recs.Microdata()
data = recs[recs["DIVISION"]==codes["division"]]
ins = []
avg = []
std = []
for n in range(1,4):
    ins.append(data[data["ADQINSUL"]==n])
    avg.append(numpy.log(ins[-1]["TOTSQFT_EN"]).mean())
    std.append(numpy.log(ins[-1]["TOTSQFT_EN"]).std())
#end

// create the same number of homes with a similar log-normal distribution
module residential;
object house:..${PYTHON len(ins[0])}
{
    floor_area random.lognormal(${PYTHON avg[0]},${PYTHON std[0]});
    thermal_integrity_level GOOD;
}
object house:..${PYTHON len(ins[1])}
{
    floor_area random.lognormal(${PYTHON avg[1]},${PYTHON std[1]});
    thermal_integrity_level NORMAL;
}
object house:..${PYTHON len(ins[2])}
{
    floor_area random.lognormal(${PYTHON avg[2]},${PYTHON std[2]});
    thermal_integrity_level LITTLE;
}

// save and plot the results 
#set savefile=${modelname/.glm/.json}
#on_exit 0 python3 ${modelname/.glm/.py}
