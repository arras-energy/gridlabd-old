#set suppress_repeat_messages=false
#set strictnames=0
#set literal_if=FALSE

// this shouldn't be necessary once ticket:630 is resolved
#define ok=ok
#define failed=failed

// use default parameter
#print Testing var1...
#if ${var1:-ok}!=ok
#error var1 test 1 failed!
#endif
#define var1=ok
#if ${var1:-failed}!=ok
#error var1 test 2 failed!
#endif

// assign default parameter
#print Testing var2...
#if ${var2:=ok}!=ok
#error var2 test 1 failed!
#endif
#if ${var2:-failed}!=ok
#error var2 test 2 failed!
#endif

// use alternate parameter
#print Testing var3...
#define var3=failed
#if ${var3:+ok}!=ok
#error var3 test 1 failed!
#endif

// substring
#print Testing var4...
#define var4=failedok
#if ${var4:6}!=ok
#error var4 test 1 failed!
#endif

#print Testing var5...
#define var5=failedokfailed
#if ${var5:6:2}!=ok
#error var5 test 1 failed!
#endif

// substitution
#print Testing var6...
#define var6=okfailed
#if ${var6/failed/}!=ok
#error var6 test 1 failed!
#endif

#print Testing var7...
#define var7=failedok
#if ${var7/failed/}!=ok
#error var7 test 1 failed!
#endif

#print Testing var8...
#define var8=ofailedk
#if ${var8/failed/}!=ok
#error var8 test 1 failed!
#endif

#print Testing var9...
#define var9=failedofailedkfailed
#if ${var9//failed/}!=ok
#error var9 test 1 failed!
#endif

// operations
#print Initializing int1...
#print int1=${int1=1}
#if int1!=1
#error int1 test 1 failed!
#endif

#print Preincrementing int1... 
#print int1=${++int1}
#if int1!=2
#error int1 test 2 failed!
#endif

#print Predecrementing int1... 
#print int1=${--int1}
#if int1!=1
#error int1 test 3 failed!
#endif

#print Postincrementing int1=${int1++}...
#print int1=${int1}
#if int1!=2
#error int1 test 4 failed!
#endif

#print Postdecrementing int1=${int1--}...
#print int1=${int1}
#if int1!=1
#error int1 test 5 failed!
#endif

#print Boolean tests... 
#if ok!=${int1==0?failed:ok}
#error Boolean == test 1 failed!
#endif
#if ok!=${int1==1?ok:failed}
#error Boolean == test 2 failed!
#endif
#if ok!=${int1==2?failed:ok}
#error Boolean == test 3 failed!
#endif

#if ok!=${int1!=0?ok:failed}
#error Boolean != test 1 failed!
#endif
#if ok!=${int1!=1?failed:ok}
#error Boolean != test 2 failed!
#endif
#if ok!=${int1!=2?ok:failed}
#error Boolean != test 3 failed!
#endif

#if ok!=${int1<>0?ok:failed}
#error Boolean <> test 1 failed!
#endif
#if ok!=${int1<>1?failed:ok}
#error Boolean <> test 2 failed!
#endif
#if ok!=${int1<>2?ok:failed}
#error Boolean <> test 3 failed!
#endif

#if ok!=${int1<0?failed:ok}
#error Boolean < test 1 failed!
#endif
#if ok!=${int1<1?failed:ok}
#error Boolean < test 2 failed!
#endif
#if ok!=${int1<2?ok:failed}
#error Boolean < test 3 failed!
#endif

#if ok!=${int1>0?ok:failed}
#error Boolean > test 1 failed!
#endif
#if ok!=${int1>1?failed:ok}
#error Boolean > test 2 failed!
#endif
#if ok!=${int1>2?failed:ok}
#error Boolean > test 3 failed!
#endif

#if ok!=${int1<=0?failed:ok}
#error Boolean <= test 1 failed!
#endif
#if ok!=${int1<=1?ok:failed}
#error Boolean <= test 2 failed!
#endif
#if ok!=${int1<=2?ok:failed}
#error Boolean <= test 3 failed!
#endif

#if ok!=${int1>=0?ok:failed}
#error Boolean >= test 1 failed!
#endif
#if ok!=${int1>=1?ok:failed}
#error Boolean >= test 2 failed!
#endif
#if ok!=${int1>=2?failed:ok}
#error Boolean >= test 3 failed!
#endif

#print Boolean updates int1: ${int1|=2}...
#if ok!=${int1&3?ok:failed}
#error Boolean |= test 1 failed!
#endif
#print Boolean updates int1: ${int1&=5}...
#if ok!=${int1|~4?ok:failed}
#error Boolean &= test 2 failed!
#endif
#print Boolean updates int1: ${int1^=2}...
#if ok!=${int1==3?ok:failed}
#error Boolean ^= test 3 failed!
#endif
