// test_core_runtime_class.glm tests to see if runtime classes will compile in gridlab-d
// d3y334

#set tmp=../test_opt_core_pc_and_fn
#setenv GRIDLABD=../../../core
#set force_compile=1

module market;
module tape;
module residential {
	implicit_enduses NONE;
}

clock {
	timezone PST+8PDT;
	starttime '2005-12-31 23:00:00';
	stoptime '2006-02-01 01:00:00';
}

schedule buy_quantity {
	* 0-5 * * * 1;
	* 6-8 * * * 5;
	* 9-17 * * * 2;
	* 18-21 * * * 10;
	* 22-23 * * * 3;
}

schedule sell_quantity_1 {
	* 0-5 * * * 1.5;
	* 6-8 * * * 7.5;
	* 9-17 * * * 2;
	* 18-21 * * * 15;
	* 22-23 * * * 4.5;
}

schedule sell_quantity_2 {
	* 0-5 * * * 1.5;
	* 6-8 * * * 7.5;
	* 9-17 * * * 2;
	* 18-21 * * * 15;
	* 22-23 * * * 3;
}

schedule sell_quantity_3 {
	* 0-5 * * * 1.5;
	* 6-8 * * * 7.5;
	* 9-17 * * * 2;
	* 18-21 * * * 15;
	* 22-23 * * * 3;
}

schedule buy_price_1 {
	* * * * * 10; 
}

schedule buy_price_2 {
	0-29 * * * * 25;
	30-59 * * * * 30;
}

schedule sell_price_1 {
	* 0-17 * * * 5;
	* 18-21 * * * 10;
	* 22-23 * * * 60;
}

schedule sell_price_2 {
	* 0-5 * * * 20;
	* 6-8 * * * 40;
	* 9-17 * * * 20;
	* 18-21 * * * 30;
	* 22-23 * * * 80;
}

schedule sell_price_3 {
	* 0-5 * * * 40;
	* 6-8 * * * 60;
	* 9-17 * * * 40;
	* 18-21 * * * 50;
	* 22-23 * * * 100;
}

schedule clear_price{
	* 1-6 * * * 20;
	* 7-9 * * * 30;
	* 10-18 * * * 25;
	* 19-22 * * * 30;
	* 23-0 * * * 55;
}

schedule clear_quantity {
	* 1-6 * * * 2;
	* 7-9 * * * 7.5;
	* 10-18 * * * 4;
	* 19-22 * * * 20;
	* 23-0 * * * 0;
}

object auction {
	name Market;
	unit "kW";
	period 3600;
	verbose TRUE;
	price_cap 9999;
	object recorder {
		property last.P,last.Q,next.P,next.Q,avg24,std24,avg72,std72,avg168,std168;
		file "test_market_auction.csv";
		interval 3600;
		limit 8760;
	};
}
 
 class test {
	int64 next_t;
	double bid_period;
	int16 count;
	object market;
	enumeration {BUYER=0, SELLER=1} role;
	int32 lastbid_id;
	int64 lastmkt_id;
	double price;		//Added in so price can be specified
	double quantity;	//Added in so quantity can be specified
	public int64 *thismkt_id;
	function auction::submit_bid;
	intrinsic create (object parent)
	{
		return SUCCESS;
	};
	intrinsic init (object parent)
	{
		next_t = 0;
		lastbid_id = -1;
		lastmkt_id = -1;
		if (market==NULL)
			throw (char*)"market is not defined";
		thismkt_id = (int64*)gl_get_addr(market,"market_id");
		if (thismkt_id==NULL)
			throw (char*)"market does not define market_id";
		return SUCCESS;
	};
	intrinsic precommit(TIMESTAMP t0){
		gl_verbose("precommit called at %llu", t0);
		return SUCCESS;
	};
	intrinsic sync (TIMESTAMP t0, TIMESTAMP t1)
	{
		if (t1==next_t || next_t==0)
		{
			next_t=t1+bid_period;
			lastbid_id = (int32)submit_bid(market,my,role==BUYER?-quantity:quantity,price,*thismkt_id!=lastmkt_id?-1:lastbid_id);
			count--;
			lastmkt_id = *thismkt_id;
		}
		if (count>0)
			return next_t;
		else
			return TS_NEVER;
	};
	intrinsic finalize(){
		gl_verbose("finalize was called");
		return SUCCESS;
	};
}

object test {
	name BIDDER_1;
	role BUYER;
	count 10000;
	bid_period 3600;
	price buy_price_1*1;
	quantity buy_quantity*1;
	market Market;
}

object test {
	name BIDDER_2;
	role BUYER;
	count 10000;
	bid_period 1800;
	price buy_price_2*1;
	quantity buy_quantity*1;
	market Market;
}

object test {
	name BIDDER_3;
	role BUYER;
	count 10000;
	bid_period 3600;
	price buy_price_1*5;
	quantity buy_quantity*1;
	market Market;
}

object test {
	name SELLER_1;
	role SELLER;
	count 10000;
	bid_period 3600;
	price sell_price_1*1;
	quantity sell_quantity_1*1;
	market Market;
}

object test {
	name SELLER_2;
	role SELLER;
	count 10000;
	bid_period 3600;
	price sell_price_2*1;
	quantity sell_quantity_2*1;
	market Market;
}

object test {
	name SELLER_3;
	role SELLER;
	count 10000;
	bid_period 3600;
	price sell_price_3*1;
	quantity sell_quantity_3*1;
	market Market;
}