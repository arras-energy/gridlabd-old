///////////////////////////////////////////////////////
//
// IEEE 123 realtime simulation model
// Copyright (C) 2016, Stanford University
// Author: dchassin@slac.stanford.edu
//
///////////////////////////////////////////////////////

//
// Read the configuration file for this system
// Assumes the model is run from parent of model folder
//
#define DOCROOT=/ieee123
#define HOSTNAME=localhost
#define MYSQLHOST=${HOSTNAME}
#define NAME=ieee123.glm
#define PORT=3306
#define WEATHER=CA-Bakersfield_Meadows_Field.tmy3
#define TIMEZONE=US/CA/Los Angeles
#define LOADS=on
#define SOLAR=on
#define DR_HVAC=none
#define DR_WATERHEATER=none
#define DR_DISHWASHER=none
#define DR_WASHER=none
#define DR_DRYER=none
//#define MYSQL_ENABLE='on'
#define MYSQL_NAME=ieee123
#define MYSQL_SCADA=on
#define MYSQL_AMI=on

#define STARTTIME=2018-01-01 00:00:00 PST
#define STOPTIME=2019-01-01 00:00:00 PST

//
// Check the configuration
//
#ifndef PORT // this is required and defined in config/local.glm
#error config/local.glm load failed: if you have not already done so you must your server configure using config.php to create config/local.glm
#endif // PORT

///////////////////////////////////////////////////////
//
// BASIC SETTINGS
//
///////////////////////////////////////////////////////

#ifdef RANDOMSEED
#set randomseed=${RANDOMSEED} // select deterministic simulation
#endif // RANDOMSEED

#ifndef STARTTIME
#ifndef STOPTIME
//
// Realtime run
//
#set show_progress=0
#set suppress_repeat_messages=FALSE // allow all similar messages to be logged

#ifdef HOSTNAME
#set hostname=${HOSTNAME}  // tells clients where to get the data
#else
#warning HOSTNAME is not defined in either your environment or in config.glm, using localhost
#define HOSTNAME=localhost
#endif // HOSTNAME

#option server // enables the server

#set run_realtime=1 // tells the server to run in realtime mode

#set server_portnum=${PORT} // is the port that clients will connect to
#endif // STOPTIME
#endif // STARTTIME

#ifdef TIMEZONE
clock {
	timezone ${TIMEZONE};
#ifdef STARTTIME
	starttime ${STARTTIME};
#endif
#ifdef STOPTIME
	stoptime ${STOPTIME};
#endif
}
#else
#error No timezone specified
#endif // TIMEZONE

///////////////////////////////////////////////////////
//
// WEATHER
//
///////////////////////////////////////////////////////
#ifexist data/${WEATHER}
module climate;
object climate {
        name weather;
        tmyfile "data/${WEATHER}";
        interpolate QUADRATIC;
}
#else
#error No weather specified.
#endif // exist WEATHER

///////////////////////////////////////////////////////
//
// POWER SYSTEM MODEL
//
///////////////////////////////////////////////////////
module powerflow {
	solver_method NR;
	line_capacitance true;
	convergence_error_handling IGNORE;
}

#ifdef SOLAR
module generators;
#endif // SOLAR

#ifdef VOLTDUMP
object voltdump {
	filename ${VOLTDUMP};
	group "nodevolts";
	mode polar;
}
#endif // VOLTDUMP

#ifdef CURRDUMP
object currdump {
	filename ${CURRDUMP};
	mode rect;
}
#endif // CURRDUMP

//
// Powerflow component configurations
//

//Conductors
object overhead_line_conductor {
	name olc301c;	//336,400 26/7 ACSR
	geometric_mean_radius 0.0244;
	resistance 0.306;
	diameter 0.721;
}

object overhead_line_conductor {
	name olc301n;	//4/0 6/1 ACSR
	geometric_mean_radius 0.00814;
	resistance 0.592;
	diameter 0.563;
}

object overhead_line_conductor {
	name olc309;	//1/0 ACSR
	geometric_mean_radius 0.004460;
	resistance 1.120000;
	diameter 0.398;
}

object underground_line_conductor {
	name ulc312;	//1/0 AA, CN
	outer_diameter 1.06;
	conductor_gmr 0.0111;
	conductor_diameter 0.368;
	conductor_resistance 0.97;
	neutral_gmr 0.00208;
	neutral_resistance 14.8722;
	neutral_diameter 0.0640837;
	neutral_strands 16.0;
}

//Line spacings
//ABCN
object line_spacing {
	name ls500301;
	distance_AB 2.5;
	distance_AC 7.0;
	distance_BC 4.5;
	distance_CN 5.0;
	distance_AN 5.65685424949;
	distance_BN 4.27200187266;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//CABN
object line_spacing {
	name ls500302;
	distance_AB 4.5;
	distance_AC 2.5;
	distance_BC 7.0;
	distance_AN 4.27200187266;
	distance_CN 5.65685424949;
	distance_BN 5.0;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//BCAN
object line_spacing {
	name ls500303;
	distance_AB 7.0;
	distance_AC 4.5;
	distance_BC 2.5;
	distance_AN 5.0;
	distance_BN 5.65685424949;
	distance_CN 4.27200187266;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//CBAN
object line_spacing {
	name ls500304;
	distance_AB 4.5;
	distance_AC 7.0;
	distance_BC 2.5;
	distance_AN 5.0;
	distance_BN 4.27200187266;
	distance_CN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//BACN
object line_spacing {
	name ls500305;
	distance_AB 2.5;
	distance_AC 4.5;
	distance_BC 7.0;
	distance_CN 5.0;
	distance_AN 4.27200187266;
	distance_BN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ACBN
object line_spacing {
	name ls500306;
	distance_AB 2.5;
	distance_AC 7.0;
	distance_BC 4.5;
	distance_CN 5.0;
	distance_BN 4.27200187266;
	distance_AN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ACN
object line_spacing {
	name ls505307;
	distance_AC 7.0;
	distance_AN 5.65685424949;
	distance_CN 5.0;
	distance_AE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ABN
object line_spacing {
	name ls505308;
	distance_AB 7.0;
	distance_AN 5.65685424949;
	distance_BN 5.0;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_NE 24.0;
}

//AN
object line_spacing {
	name ls510309;
	distance_AN 5.024937811;
	distance_AE 28.0;
	distance_NE 24.0;
}

//BN
object line_spacing {
	name ls510310;
	distance_BN 5.024937811;
	distance_BE 28.0;
	distance_NE 24.0;
}

//CN
object line_spacing {
	name ls510311;
	distance_CN 5.024937811;
	distance_CE 28.0;
	distance_NE 24.0;
}

//UGL - ABC
object line_spacing {
	name ls515312;
	distance_AB 0.5;
	distance_AC 1.0;
	distance_BC 0.5;
}

//Line configurations
//ABCN
object line_configuration {
	name lc301;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500301;
}

//CABN
object line_configuration {
	name lc302;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500302;
}

//BCAN
object line_configuration {
	name lc303;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500303;
}

//CBAN
object line_configuration {
	name lc304;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500304;
}

//BACN
object line_configuration {
	name lc305;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500305;
}

//ACBN
object line_configuration {
	name lc306;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls500306;
}

//ACN
object line_configuration {
	name lc307;
	conductor_A olc301c;
	conductor_C olc301c;
	conductor_N olc301n;
	spacing ls505307;
}

//ABN
object line_configuration {
	name lc308;
	conductor_A olc301c;
	conductor_B olc301c;
	conductor_N olc301n;
	spacing ls505308;
}

//AN
object line_configuration {
	name lc309;
	conductor_A olc309;
	conductor_N olc309;
	spacing ls510309;
}

//BN
object line_configuration {
	name lc310;
	conductor_B olc309;
	conductor_N olc309;
	spacing ls510310;
}

//CN
object line_configuration {
	name lc311;
	conductor_C olc309;
	conductor_N olc309;
	spacing ls510311;
}

//ABC
object line_configuration {
	name lc312;
	conductor_A ulc312;
	conductor_B ulc312;
	conductor_C ulc312;
	spacing ls515312;
}

//Transformer configurations
object transformer_configuration {
	name tc500;
	connect_type DELTA_DELTA;
	install_type PADMOUNT;
	power_rating 150.0 kVA;
	primary_voltage 4160.0;
	secondary_voltage 480.0;
	resistance 0.0127;
	reactance 0.0272;
}

object transformer_configuration {
	name tc9999;
	connect_type DELTA_GWYE;
	install_type PADMOUNT;
	power_rating 5.0 MVA;
	primary_voltage 115.0;
	secondary_voltage 4160.0;
	resistance 0.01;
	reactance 0.08;
}

// Regulator configs
object regulator_configuration {
	name rc501;
	connect_type WYE_WYE;
	band_center 2400.000;
	band_width 40.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 700;
	power_transducer_ratio 20;
	compensator_r_setting_A 3.0;
	compensator_x_setting_A 7.5;
	CT_phase "A";
	PT_phase "A";
	regulation 0.10;
	Control OUTPUT_VOLTAGE;
	Type A;
	tap_pos_A 0;
	tap_pos_B 0;
	tap_pos_C 0;
}

object regulator_configuration {
	name rc502;
	connect_type WYE_WYE;
	band_center 2400.000;
	band_width 40.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 50;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.4;
	compensator_x_setting_A 0.4;
	CT_phase "A";
	PT_phase "A";
	regulation 0.10;
	Control OUTPUT_VOLTAGE;
	Type A;
	tap_pos_A -1;
	tap_pos_B 0;
	tap_pos_C 0;
}

object regulator_configuration {
	name rc503;
	connect_type WYE_WYE;
	band_center 2400.000;
	band_width 20.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 50;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.4;
	compensator_r_setting_C 0.4;
	compensator_x_setting_A 0.4;
	compensator_x_setting_C 0.4;
	CT_phase "AC";
	PT_phase "AC";
	regulation 0.10;
	Control OUTPUT_VOLTAGE;
	Type A;
	tap_pos_A 0;
	tap_pos_B 0;
	tap_pos_C -1;
}

object regulator_configuration {
	name rc504;
	connect_type WYE_WYE;
	band_center 2400.000;
	band_width 40.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 300;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.6;
	compensator_r_setting_B 1.4;
	compensator_r_setting_C 0.2;
	compensator_x_setting_A 1.3;
	compensator_x_setting_B 2.6;
	compensator_x_setting_C 1.4;
	CT_phase "ABC";
	PT_phase "ABC";
	regulation 0.10;
	Control OUTPUT_VOLTAGE;
	Type A;
	tap_pos_A 8;
	tap_pos_B 1;
	tap_pos_C 5;
}


//
// Power system topology
//
//Pure nodes

object node {
	name node_3;
	groupid nodevolts;
	phases CN;
	nominal_voltage 2401.7771;
}

object node {
	name node_8;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_13;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_14;
	groupid nodevolts;
	phases AN;
	nominal_voltage 2401.7771;
}

object node {
	name node_15;
	groupid nodevolts;
	phases CN;
	nominal_voltage 2401.7771;
}

object node {
	name node_18;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_21;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_23;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_25;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_26;
	groupid nodevolts;
	phases ACN;
	nominal_voltage 2401.7771;
}

object node {
	name node_27;
	groupid nodevolts;
	phases ACN;
	nominal_voltage 2401.7771;
}

object node {
	name node_36;
	groupid nodevolts;
	phases ABN;
	nominal_voltage 2401.7771;
}

object node {
	name node_40;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_44;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_54;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_57;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_61;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_67;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_72;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_78;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_81;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_89;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_91;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_93;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_97;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_101;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_105;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_108;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_110;
	groupid nodevolts;
	phases AN;
	nominal_voltage 2401.7771;
}

object node {
	name node_135;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_149;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_150;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
	bustype SWING;
	voltage_A 2401.777120+0.000000j;
	voltage_B -1200.888560-2080.000000j;
	voltage_C -1200.888560+2080.000000j;
}

object node {
	name node_151;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_152;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_160;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_197;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_250;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_300;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_450;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_610;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_901;
	groupid nodevolts;
	phases AN;
	nominal_voltage 2401.7771;
}

object node {
	name node_2501;
	groupid nodevolts;
	phases ACN;
	nominal_voltage 2401.7771;
}

object node {
	name node_6101;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_15001;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

object node {
	name node_16001;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
}

//Pure spot loads

object load {
	name load_1;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_2;
	groupid nodevolts;
	phases BN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_4;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_5;
	groupid nodevolts;
	phases CN;
	constant_current_C -0.557814+9.293330j;
	nominal_voltage 2401.7771;
}

object load {
	name load_6;
	groupid nodevolts;
	phases CN;
	constant_impedance_C 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_7;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_9;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_10;
	groupid nodevolts;
	phases AN;
	constant_current_A 8.327167-4.163584j;
	nominal_voltage 2401.7771;
}

object load {
	name load_11;
	groupid nodevolts;
	phases AN;
	constant_impedance_A 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_12;
	groupid nodevolts;
	phases BN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_16;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_17;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_19;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_20;
	groupid nodevolts;
	phases AN;
	constant_current_A 16.654335-8.327167j;
	nominal_voltage 2401.7771;
}

object load {
	name load_22;
	groupid nodevolts;
	phases BN;
	constant_impedance_B 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_24;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_28;
	groupid nodevolts;
	phases ABCN;
	constant_current_A 16.654335-8.327167j;
	nominal_voltage 2401.7771;
}

object load {
	name load_29;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_A 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_30;
	groupid nodevolts;
	phases ABCN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_31;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_32;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_33;
	groupid nodevolts;
	phases AN;
	constant_current_A 16.654335-8.327167j;
	nominal_voltage 2401.7771;
}

object load {
	name load_34;
	groupid nodevolts;
	phases CN;
	constant_impedance_C 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_35;
	groupid nodevolts;
	phases ABCD;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_37;
	groupid nodevolts;
	phases AN;
	constant_impedance_A 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_38;
	groupid nodevolts;
	phases BN;
	constant_current_B -7.769353-5.129747j;
	nominal_voltage 2401.7771;
}

object load {
	name load_39;
	groupid nodevolts;
	phases BN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_41;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_42;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_43;
	groupid nodevolts;
	phases BN;
	constant_impedance_B 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_45;
	groupid nodevolts;
	phases AN;
	constant_current_A 8.327167-4.163584j;
	nominal_voltage 2401.7771;
}

object load {
	name load_46;
	groupid nodevolts;
	phases AN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_47;
	groupid nodevolts;
	phases ABCN;
	constant_current_A 14.572543-10.408959j;
	constant_current_B -16.300695-7.415713j;
	constant_current_C 1.728152+17.824672j;
	nominal_voltage 2401.7771;
}

object load {
	name load_48;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_A 54.567207+38.976577j;
	constant_impedance_B 54.567207+38.976577j;
	constant_impedance_C 54.567207+38.976577j;
	nominal_voltage 2401.7771;
}

object load {
	name load_49;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 35000.000000+25000.000000j;
	constant_power_B 70000.000000+50000.000000j;
	constant_power_C 35000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_50;
	groupid nodevolts;
	phases ABCN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_51;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_52;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_53;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_55;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_A 230.741333+115.370667j;
	nominal_voltage 2401.7771;
}

object load {
	name load_56;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_58;
	groupid nodevolts;
	phases BN;
	constant_current_B -7.769353-5.129747j;
	nominal_voltage 2401.7771;
}

object load {
	name load_59;
	groupid nodevolts;
	phases BN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_60;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_62;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_C 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_63;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_64;
	groupid nodevolts;
	phases ABCN;
	constant_current_B -28.233631-19.756998j;
	nominal_voltage 2401.7771;
}

object load {
	name load_65;
	groupid nodevolts;
	phases ABCD;
	constant_impedance_A 327.403243+233.859459j;
	constant_impedance_B 327.403243+233.859459j;
	constant_impedance_C 163.701622+116.929730j;
	nominal_voltage 2401.7771;
}

object load {
	name load_66;
	groupid nodevolts;
	phases ABCN;
	constant_power_C 75000.000000+35000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_68;
	groupid nodevolts;
	phases AN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_69;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_70;
	groupid nodevolts;
	phases AN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_71;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_73;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_74;
	groupid nodevolts;
	phases CN;
	constant_impedance_C 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_75;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_76;
	groupid nodevolts;
	phases ABCD;
	constant_current_A 31.474199-4.034142j;
	constant_current_B -12.019231-16.826923j;
	constant_current_C -8.562927+18.822421j;
	nominal_voltage 2401.7771;
}

object load {
	name load_77;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_79;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_A 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_80;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_82;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_83;
	groupid nodevolts;
	phases ABCN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_84;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_85;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_86;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_87;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_88;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_90;
	groupid nodevolts;
	phases BN;
	constant_current_B -15.538706-10.259493j;
	nominal_voltage 2401.7771;
}

object load {
	name load_92;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_94;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_95;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_96;
	groupid nodevolts;
	phases BN;
	constant_power_B 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_98;
	groupid nodevolts;
	phases ABCN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_99;
	groupid nodevolts;
	phases ABCN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_100;
	groupid nodevolts;
	phases ABCN;
	constant_impedance_C 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_102;
	groupid nodevolts;
	phases CN;
	constant_power_C 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_103;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_104;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_106;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_107;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_109;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_111;
	groupid nodevolts;
	phases AN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

object load {
	name load_112;
	groupid nodevolts;
	phases AN;
	constant_current_A 8.327167-4.163584j;
	nominal_voltage 2401.7771;
}

object load {
	name load_113;
	groupid nodevolts;
	phases AN;
	constant_impedance_A 115.370667+57.685333j;
	nominal_voltage 2401.7771;
}

object load {
	name load_114;
	groupid nodevolts;
	phases AN;
	constant_power_A 20000.000000+10000.000000j;
	nominal_voltage 2401.7771;
}

//distributed loads intermediates (2/3 load at 1/4 line)

//pure distributed loads (1/3 load at end of line)

//combination loads (1/3 dist load and spot load)

//Pure lines (no distributed loads)

object overhead_line {
	name line1to2;
	phases BN;
	from load_1;
	to load_2;
	length 175.00;
	configuration lc310;
}

object overhead_line {
	name line1to3;
	phases CN;
	from load_1;
	to node_3;
	length 250.00;
	configuration lc311;
}

object overhead_line {
	name line1to7;
	phases ABCN;
	from load_1;
	to load_7;
	length 300.00;
	configuration lc301;
}

object overhead_line {
	name line3to4;
	phases CN;
	from node_3;
	to load_4;
	length 200.00; 
	configuration lc311;
}

object overhead_line {
	name line3to5;
	phases CN;
	from node_3;
	to load_5;
	length 325.00;
	configuration lc311;
}

object overhead_line {
	name line5to6;
	phases CN;
	from load_5;
	to load_6;
	length 250.00;
	configuration lc311;
}

object overhead_line {
	name line7to8;
	phases ABCN;
	from load_7;
	to node_8;
	length 200.00;
	configuration lc301;
}

object overhead_line {
	name line8to12;
	phases BN;
	from node_8;
	to load_12;
	length 225.00;
	configuration lc310;
}

object overhead_line {
	name line8to9;
	phases AN;
	from node_8;
	to load_9;
	length 225.00;
	configuration lc309;
}

object overhead_line {
	name line8to13;
	phases ABCN;
	from node_8;
	to node_13;
	length 300.00;
	configuration lc301;
}

object overhead_line {
	name line901to14;
	phases AN;
	from node_901;
	to node_14;
	length 425.00;
	configuration lc309;
}

object overhead_line {
	name line13to34;
	phases CN;
	from node_13;
	to load_34;
	length 150.00;
	configuration lc311;
}

object overhead_line {
	name line13to18;
	phases ABCN;
	from node_13;
	to node_18;
	length 825.00;
	configuration lc302;
}

object overhead_line {
	name line14to11;
	phases AN;
	from node_14;
	to load_11;
	length 250.00;
	configuration lc309;
}

object overhead_line {
	name line14to10;
	phases AN;
	from node_14;
	to load_10;
	length 250.00;
	configuration lc309;
}

object overhead_line {
	name line15to16;
	phases CN;
	from node_15;
	to load_16;
	length 375.00;
	configuration lc311;
}

object overhead_line {
	name line15to17;
	phases CN;
	from node_15;
	to load_17;
	length 350.00;
	configuration lc311;
}

object overhead_line {
	name line18to19;
	phases AN;
	from node_18;
	to load_19;
	length 250.00;
	configuration lc309;
}

object overhead_line {
	name line18to21;
	phases ABCN;
	from node_18;
	to node_21;
	length 300.00;
	configuration lc302;
}

object overhead_line {
	name line19to20;
	phases AN;
	from load_19;
	to load_20;
	length 325.00;
	configuration lc309;
}

object overhead_line {
	name line21to22;
	phases BN;
	from node_21;
	to load_22;
	length 525.00;
	configuration lc310;
}

object overhead_line {
	name line21to23;
	phases ABCN;
	from node_21;
	to node_23;
	length 250.00;
	configuration lc302;
}

object overhead_line {
	name line23to24;
	phases CN;
	from node_23;
	to load_24;
	length 550.00;
	configuration lc311;
}

object overhead_line {
	name line23to25;
	phases ABCN;
	from node_23;
	to node_25;
	length 275.00;
	configuration lc302;
}

object overhead_line {
	name line2501to26;
	phases ACN;
	from node_2501;
	to node_26;
	length 350.00;
	configuration lc307;
}

object overhead_line {
	name line25to28;
	phases ABCN;
	from node_25;
	to load_28;
	length 200.00;
	configuration lc302;
}

object overhead_line {
	name line26to27;
	phases ACN;
	from node_26;
	to node_27;
	length 275.00;
	configuration lc307;
}

object overhead_line {
	name line26to31;
	phases CN;
	from node_26;
	to load_31;
	length 225.00;
	configuration lc311;
}

object overhead_line {
	name line27to33;
	phases AN;
	from node_27;
	to load_33;
	length 500.00;
	configuration lc309;
}

object overhead_line {
	name line28to29;
	phases ABCN;
	from load_28;
	to load_29;
	length 300.00;
	configuration lc302;
}

object overhead_line {
	name line29to30;
	phases ABCN;
	from load_29;
	to load_30;
	length 350.00;
	configuration lc302;
}

object overhead_line {
	name line30to250;
	phases ABCN;
	from load_30;
	to node_250;
	length 200.00;
	configuration lc302;
}

object overhead_line {
	name line31to32;
	phases CN;
	from load_31;
	to load_32;
	length 300.00;
	configuration lc311;
}

object overhead_line {
	name line34to15;
	phases CN;
	from load_34;
	to node_15;
	length 100.00;
	configuration lc311;
}

object overhead_line {
	name line35to36;
	phases ABN;
	from load_35;
	to node_36;
	length 650.00;
	configuration lc308;
}

object overhead_line {
	name line35to40;
	phases ABCN;
	from load_35;
	to node_40;
	length 250.00;
	configuration lc301;
}

object overhead_line {
	name line36to37;
	phases AN;
	from node_36;
	to load_37;
	length 300.00;
	configuration lc309;
}

object overhead_line {
	name line36to38;
	phases BN;
	from node_36;
	to load_38;
	length 250.00;
	configuration lc310;
}

object overhead_line {
	name line38to39;
	phases BN;
	from load_38;
	to load_39;
	length 325.00;
	configuration lc310;
}

object overhead_line {
	name line40to41;
	phases CN;
	from node_40;
	to load_41;
	length 325.00;
	configuration lc311;
}

object overhead_line {
	name line40to42;
	phases ABCN;
	from node_40;
	to load_42;
	length 250.00;
	configuration lc301;
}

object overhead_line {
	name line42to43;
	phases BN;
	from load_42;
	to load_43;
	length 500.00;
	configuration lc310;
}

object overhead_line {
	name line42to44;
	phases ABCN;
	from load_42;
	to node_44;
	length 200.00;
	configuration lc301;
}

object overhead_line {
	name line44to45;
	phases AN;
	from node_44;
	to load_45;
	length 200.00;
	configuration lc309;
}

object overhead_line {
	name line44to47;
	phases ABCN;
	from node_44;
	to load_47;
	length 250.00;
	configuration lc301;
}

object overhead_line {
	name line45to46;
	phases AN;
	from load_45;
	to load_46;
	length 300.00;
	configuration lc309;
}

object overhead_line {
	name line47to48;
	phases ABCN;
	from load_47;
	to load_48;
	length 150.00;
	configuration lc304;
}

object overhead_line {
	name line47to49;
	phases ABCN;
	from load_47;
	to load_49;
	length 250.00;
	configuration lc304;
}

object overhead_line {
	name line49to50;
	phases ABCN;
	from load_49;
	to load_50;
	length 250.00;
	configuration lc304;
}

object overhead_line {
	name line50to51;
	phases ABCN;
	from load_50;
	to load_51;
	length 250.00;
	configuration lc304;
}

object overhead_line {
	name line51to151;
	phases ABCN;
	from load_51;
	to node_151;
	length 500.00;
	configuration lc304;
}

object overhead_line {
	name line52to53;
	phases ABCN;
	from load_52;
	to load_53;
	length 200.00;
	configuration lc301;
}

object overhead_line {
	name line53to54;
	phases ABCN;
	from load_53;
	to node_54;
	length 125.00;
	configuration lc301;
}

object overhead_line {
	name line54to55;
	phases ABCN;
	from node_54;
	to load_55;
	length 275.00;
	configuration lc301;
}

object overhead_line {
	name line54to57;
	phases ABCN;
	from node_54;
	to node_57;
	length 350.00;
	configuration lc303;
}

object overhead_line {
	name line55to56;
	phases ABCN;
	from load_55;
	to load_56;
	length 275.00;
	configuration lc301;
}

object overhead_line {
	name line57to58;
	phases BN;
	from node_57;
	to load_58;
	length 250.00;
	configuration lc310;
}

object overhead_line {
	name line57to60;
	phases ABCN;
	from node_57;
	to load_60;
	length 750.00;
	configuration lc303;
}

object overhead_line {
	name line58to59;
	phases BN;
	from load_58;
	to load_59;
	length 250.00;
	configuration lc310;
}

object overhead_line {
	name line60to61;
	phases ABCN;
	from load_60;
	to node_61;
	length 550.00;
	configuration lc305;
}

object underground_line {
	name line60to62;
	phases ABC;
	from load_60;
	to load_62;
	length 250.00;
	configuration lc312;
}

object underground_line {
	name line62to63;
	phases ABC;
	from load_62;
	to load_63;
	length 175.00;
	configuration lc312;
}

object underground_line {
	name line63to64;
	phases ABC;
	from load_63;
	to load_64;
	length 350.00;
	configuration lc312;
}

object underground_line {
	name line64to65;
	phases ABC;
	from load_64;
	to load_65;
	length 425.00;
	configuration lc312;
}

object underground_line {
	name line65to66;
	phases ABC;
	from load_65;
	to load_66;
	length 325.00;
	configuration lc312;
}

object overhead_line {
	name line67to68;
	phases AN;
	from node_67;
	to load_68;
	length 200.00;
	configuration lc309;
}

object overhead_line {
	name line67to72;
	phases ABCN;
	from node_67;
	to node_72;
	length 275.00;
	configuration lc303;
}

object overhead_line {
	name line67to97;
	phases ABCN;
	from node_67;
	to node_97;
	length 250.00;
	configuration lc303;
}

object overhead_line {
	name line68to69;
	phases AN;
	from load_68;
	to load_69;
	length 275.00;
	configuration lc309;
}

object overhead_line {
	name line69to70;
	phases AN;
	from load_69;
	to load_70;
	length 325.00;
	configuration lc309;
}

object overhead_line {
	name line70to71;
	phases AN;
	from load_70;
	to load_71;
	length 275.00;
	configuration lc309;
}

object overhead_line {
	name line72to73;
	phases CN;
	from node_72;
	to load_73;
	length 275.00;
	configuration lc311;
}

object overhead_line {
	name line72to76;
	phases ABCN;
	from node_72;
	to load_76;
	length 200.00;
	configuration lc303;
}

object overhead_line {
	name line73to74;
	phases CN;
	from load_73;
	to load_74;
	length 350.00;
	configuration lc311;
}

object overhead_line {
	name line74to75;
	phases CN;
	from load_74;
	to load_75;
	length 400.00;
	configuration lc311;
}

object overhead_line {
	name line76to77;
	phases ABCN;
	from load_76;
	to load_77;
	length 400.00;
	configuration lc306;
}

object overhead_line {
	name line76to86;
	phases ABCN;
	from load_76;
	to load_86;
	length 700.00;
	configuration lc303;
}

object overhead_line {
	name line77to78;
	phases ABCN;
	from load_77;
	to node_78;
	length 100.00;
	configuration lc306;
}

object overhead_line {
	name line78to79;
	phases ABCN;
	from node_78;
	to load_79;
	length 225.00;
	configuration lc306;
}

object overhead_line {
	name line78to80;
	phases ABCN;
	from node_78;
	to load_80;
	length 475.00;
	configuration lc306;
}

object overhead_line {
	name line80to81;
	phases ABCN;
	from load_80;
	to node_81;
	length 475.00;
	configuration lc306;
}

object overhead_line {
	name line81to82;
	phases ABCN;
	from node_81;
	to load_82;
	length 250.00;
	configuration lc306;
}

object overhead_line {
	name line81to84;
	phases CN;
	from node_81;
	to load_84;
	length 675.00;
	configuration lc311;
}

object overhead_line {
	name line82to83;
	phases ABCN;
	from load_82;
	to load_83;
	length 250.00;
	configuration lc306;
}

object overhead_line {
	name line84to85;
	phases CN;
	from load_84;
	to load_85;
	length 475.00;
	configuration lc311;
}

object overhead_line {
	name line86to87;
	phases ABCN;
	from load_86;
	to load_87;
	length 450.00;
	configuration lc306;
}

object overhead_line {
	name line87to88;
	phases AN;
	from load_87;
	to load_88;
	length 175.00;
	configuration lc309;
}

object overhead_line {
	name line87to89;
	phases ABCN;
	from load_87;
	to node_89;
	length 275.00;
	configuration lc306;
}

object overhead_line {
	name line89to90;
	phases BN;
	from node_89;
	to load_90;
	length 225.00;
	configuration lc310;
}

object overhead_line {
	name line89to91;
	phases ABCN;
	from node_89;
	to node_91;
	length 225.00;
	configuration lc306;
}

object overhead_line {
	name line91to92;
	phases CN;
	from node_91;
	to load_92;
	length 300.00;
	configuration lc311;
}

object overhead_line {
	name line91to93;
	phases ABCN;
	from node_91;
	to node_93;
	length 225.00;
	configuration lc306;
}

object overhead_line {
	name line93to94;
	phases ABCN;
	from node_93;
	to load_94;
	length 275.00;
	configuration lc306;
}

object overhead_line {
	name line93to95;
	phases ABCN;
	from node_93;
	to load_95;
	length 300.00;
	configuration lc306;
}

object overhead_line {
	name line95to96;
	phases BN;
	from load_95;
	to load_96;
	length 200.00;
	configuration lc310;
}

object overhead_line {
	name line97to98;
	phases ABCN;
	from node_97;
	to load_98;
	length 275.00;
	configuration lc303;
}

object overhead_line {
	name line98to99;
	phases ABCN;
	from load_98;
	to load_99;
	length 550.00;
	configuration lc303;
}

object overhead_line {
	name line99to100;
	phases ABCN;
	from load_99;
	to load_100;
	length 300.00;
	configuration lc303;
}

object overhead_line {
	name line100to450;
	phases ABCN;
	from load_100;
	to node_450;
	length 800.00;
	configuration lc303;
}

object overhead_line {
	name line101to102;
	phases CN;
	from node_101;
	to load_102;
	length 225.00;
	configuration lc311;
}

object overhead_line {
	name line101to105;
	phases ABCN;
	from node_101;
	to node_105;
	length 275.00;
	configuration lc303;
}

object overhead_line {
	name line102to103;
	phases CN;
	from load_102;
	to load_103;
	length 325.00;
	configuration lc311;
}

object overhead_line {
	name line103to104;
	phases CN;
	from load_103;
	to load_104;
	length 700.00;
	configuration lc311;
}

object overhead_line {
	name line105to106;
	phases BN;
	from node_105;
	to load_106;
	length 225.00;
	configuration lc310;
}

object overhead_line {
	name line105to108;
	phases ABCN;
	from node_105;
	to node_108;
	length 325.00;
	configuration lc303;
}

object overhead_line {
	name line106to107;
	phases BN;
	from load_106;
	to load_107;
	length 575.00;
	configuration lc310;
}

object overhead_line {
	name line108to109;
	phases AN;
	from node_108;
	to load_109;
	length 450.00;
	configuration lc309;
}

object overhead_line {
	name line108to300;
	phases ABCN;
	from node_108;
	to node_300;
	length 1000.00;
	configuration lc303;
}

object overhead_line {
	name line109to110;
	phases AN;
	from load_109;
	to node_110;
	length 300.00;
	configuration lc309;
}

object overhead_line {
	name line110to111;
	phases AN;
	from node_110;
	to load_111;
	length 575.00;
	configuration lc309;
}

object overhead_line {
	name line110to112;
	phases AN;
	from node_110;
	to load_112;
	length 125.00;
	configuration lc309;
}

object overhead_line {
	name line112to113;
	phases AN;
	from load_112;
	to load_113;
	length 525.00;
	configuration lc309;
}

object overhead_line {
	name line113to114;
	phases AN;
	from load_113;
	to load_114;
	length 325.00;
	configuration lc309;
}

object overhead_line {
	name line135to35;
	phases ABCN;
	from node_135;
	to load_35;
	length 375.00;
	configuration lc304;
}

object overhead_line {
	name line149to1;
	phases ABCN;
	from node_149;
	to load_1;
	length 400.00;
	configuration lc301;
}

object overhead_line {
	name line152to52;
	phases ABCN;
	from node_152;
	to load_52;
	length 400.00;
	configuration lc301;
}

object overhead_line {
	name line16001to67;
	phases ABCN;
	from node_16001;
	to node_67;
	length 350.00;
	configuration lc306;
}

object overhead_line {
	name line197to101;
	phases ABCN;
	from node_197;
	to node_101;
	length 250.00;
	configuration lc303;
}

//Lines with distributed loads

//Transformers

object transformer {
	name trans6101to610;
	phases ABCN;
	from node_6101;
	to node_610;
	configuration tc500;
}

//Regulators

object regulator {
	name reg150to15001;
	phases ABCN;
	from node_150;
	to node_15001;
	configuration rc501;
}

object regulator {
	name reg9to901;
	phases AN;
	from load_9;
	to node_901;
	configuration rc502;
}

object regulator {
	name reg25to2501;
	phases ACN;
	from node_25;
	to node_2501;
	configuration rc503;
}

object regulator {
	name reg160to16001;
	phases ABCN;
	from node_160;
	to node_16001;
	configuration rc504;
}

//Switches

object switch {
	name sw13to152;
	phases ABCN;
	from node_13;
	to node_152;
	status CLOSED;
}

object switch {
	name sw18to135;
	phases ABCN;
	from node_18;
	to node_135;
	status CLOSED;
}

object switch {
	name sw54to94;
	phases ABCN;
	from node_54;
	to load_94;
	status OPEN;
}

object switch {
	name sw60to160;
	phases ABCN;
	from load_60;
	to node_160;
	status CLOSED;
}

object switch {
	name sw61to6101;
	phases ABCN;
	from node_61;
	to node_6101;
	status CLOSED;
}

object switch {
	name sw97to197;
	phases ABCN;
	from node_97;
	to node_197;
	status CLOSED;
}

object switch {
	name sw151to300;
	phases ABCN;
	from node_151;
	to node_300;
	status OPEN;
}
object switch {
	name sw15001to149;
	phases ABCN;
	from node_15001;
	to node_149;
	status CLOSED;
}

//Capacitors

object capacitor {
	name cap_83;
	parent load_83;
	phases ABC;
	phases_connected ABC;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_A 200000.0000;
	capacitor_B 200000.0000;
	capacitor_C 200000.0000;
	switchA OPEN;
	switchB OPEN;
	switchC OPEN;
};

object capacitor {
	name cap_88;
	parent load_88;
	phases A;
	phases_connected A;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_A 50000.0000;
	switchA OPEN;
};

object capacitor {
	name cap_90;
	parent load_90;
	phases B;
	phases_connected B;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_B 50000.0000;
	switchB OPEN;
};

object capacitor {
	name cap_92;
	parent load_92;
	phases C;
	phases_connected C;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_C 50000.0000;
	switchC OPEN;
};

// lateral feeds
object node {
	name node_251;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
	bustype SWING;
	voltage_A 2401.777120+0.000000j;
	voltage_B -1200.888560-2080.000000j;
	voltage_C -1200.888560+2080.000000j;
}

object node {
	name node_350;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
	bustype SWING;
	voltage_A 2401.777120+0.000000j;
	voltage_B -1200.888560-2080.000000j;
	voltage_C -1200.888560+2080.000000j;
}


object node {
	name node_451;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
	bustype SWING;
	voltage_A 2401.777120+0.000000j;
	voltage_B -1200.888560-2080.000000j;
	voltage_C -1200.888560+2080.000000j;
}

object node {
	name node_195;
	groupid nodevolts;
	phases ABCN;
	nominal_voltage 2401.7771;
	bustype SWING;
	voltage_A 2401.777120+0.000000j;
	voltage_B -1200.888560-2080.000000j;
	voltage_C -1200.888560+2080.000000j;
}

// switch to laterals
object switch {
	name sw250to251;
	phases ABCN;
	from node_250;
	to node_251;
	status OPEN;
}

object switch {
	name sw300to350;
	phases ABCN;
	from node_300;
	to node_350;
	status OPEN;
}

object switch {
	name sw450to451;
	phases ABCN;
	from node_450;
	to node_451;
	status OPEN;
}

object switch {
	name sw95to195;
	phases ABCN;
	from load_95;
	to node_195;
	status OPEN;
}



//
// Power system geoinformation
//
modify load_1.latitude 35N23.117; modify load_1.longitude 119W0.132;
modify load_2.latitude 35N23.146; modify load_2.longitude 119W0.132;
modify node_3.latitude 35N23.076; modify node_3.longitude 119W0.132;
modify load_4.latitude 35N23.043; modify load_4.longitude 119W0.132;
modify load_5.latitude 35N23.076; modify load_5.longitude 119W0.066;
modify load_6.latitude 35N23.076; modify load_6.longitude 119W0.016;
modify load_7.latitude 35N23.117; modify load_7.longitude 119W0.071;
modify node_8.latitude 35N23.117; modify node_8.longitude 119W0.031;
modify load_9.latitude 35N23.154; modify load_9.longitude 119W0.031;
modify load_10.latitude 35N23.183; modify load_10.longitude 119W0.031;
modify load_11.latitude 35N23.224; modify load_11.longitude 119W0.082;
modify load_12.latitude 35N23.08; modify load_12.longitude 119W0.031;
modify node_13.latitude 35N23.117; modify node_13.longitude 118W59.971;
modify node_14.latitude 35N23.224; modify node_14.longitude 119W0.031;
modify node_15.latitude 35N23.076; modify node_15.longitude 118W59.971;
modify load_16.latitude 35N23.014; modify load_16.longitude 118W59.971;
modify load_17.latitude 35N23.076; modify load_17.longitude 118W59.9;
modify node_18.latitude 35N23.253; modify node_18.longitude 118W59.971;
modify load_19.latitude 35N23.253; modify load_19.longitude 118W59.92;
modify load_20.latitude 35N23.199; modify load_20.longitude 118W59.92;
modify node_21.latitude 35N23.302; modify node_21.longitude 118W59.971;
modify load_22.latitude 35N23.302; modify load_22.longitude 119W0.076;
modify node_23.latitude 35N23.343; modify node_23.longitude 118W59.971;
modify load_24.latitude 35N23.343; modify load_24.longitude 119W0.082;
modify node_25.latitude 35N23.388; modify node_25.longitude 118W59.971;
modify node_26.latitude 35N23.388; modify node_26.longitude 119W0.041;
modify node_27.latitude 35N23.388; modify node_27.longitude 119W0.097;
modify load_28.latitude 35N23.421; modify load_28.longitude 118W59.971;
modify load_29.latitude 35N23.471; modify load_29.longitude 118W59.971;
modify load_30.latitude 35N23.471; modify load_30.longitude 118W59.9;
modify load_31.latitude 35N23.425; modify load_31.longitude 119W0.041;
modify load_32.latitude 35N23.475; modify load_32.longitude 119W0.041;
modify load_33.latitude 35N23.471; modify load_33.longitude 119W0.097;
modify load_34.latitude 35N23.092; modify load_34.longitude 118W59.971;
modify load_35.latitude 35N23.253; modify load_35.longitude 118W59.895;
modify node_36.latitude 35N23.146; modify node_36.longitude 118W59.895;
modify load_37.latitude 35N23.146; modify load_37.longitude 118W59.955;
modify load_38.latitude 35N23.146; modify load_38.longitude 118W59.844;
modify load_39.latitude 35N23.092; modify load_39.longitude 118W59.844;
modify node_40.latitude 35N23.294; modify node_40.longitude 118W59.895;
modify load_41.latitude 35N23.294; modify load_41.longitude 118W59.829;
modify load_42.latitude 35N23.335; modify load_42.longitude 118W59.895;
modify load_43.latitude 35N23.335; modify load_43.longitude 118W59.794;
modify node_44.latitude 35N23.368; modify node_44.longitude 118W59.895;
modify load_45.latitude 35N23.368; modify load_45.longitude 118W59.855;
modify load_46.latitude 35N23.368; modify load_46.longitude 118W59.794;
modify load_47.latitude 35N23.409; modify load_47.longitude 118W59.895;
modify load_48.latitude 35N23.409; modify load_48.longitude 118W59.925;
modify load_49.latitude 35N23.409; modify load_49.longitude 118W59.844;
modify load_50.latitude 35N23.409; modify load_50.longitude 118W59.794;
modify load_51.latitude 35N23.409; modify load_51.longitude 118W59.744;
modify load_52.latitude 35N23.117; modify load_52.longitude 118W59.89;
modify load_53.latitude 35N23.117; modify load_53.longitude 118W59.85;
modify node_54.latitude 35N23.117; modify node_54.longitude 118W59.824;
modify load_55.latitude 35N23.105; modify load_55.longitude 118W59.771;
modify load_56.latitude 35N23.092; modify load_56.longitude 118W59.718;
modify node_57.latitude 35N23.175; modify node_57.longitude 118W59.824;
modify load_58.latitude 35N23.175; modify load_58.longitude 118W59.875;
modify load_59.latitude 35N23.175; modify load_59.longitude 118W59.925;
modify load_60.latitude 35N23.141; modify load_60.longitude 118W59.679;
modify node_61.latitude 35N23.116; modify node_61.longitude 118W59.572;
modify load_62.latitude 35N23.18; modify load_62.longitude 118W59.665;
modify load_63.latitude 35N23.208; modify load_63.longitude 118W59.655;
modify load_64.latitude 35N23.263; modify load_64.longitude 118W59.636;
modify load_65.latitude 35N23.282; modify load_65.longitude 118W59.718;
modify load_66.latitude 35N23.334; modify load_66.longitude 118W59.7;
modify node_67.latitude 35N23.409; modify node_67.longitude 118W59.572;
modify load_68.latitude 35N23.409; modify load_68.longitude 118W59.532;
modify load_69.latitude 35N23.409; modify load_69.longitude 118W59.476;
modify load_70.latitude 35N23.394; modify load_70.longitude 118W59.413;
modify load_71.latitude 35N23.382; modify load_71.longitude 118W59.36;
modify node_72.latitude 35N23.364; modify node_72.longitude 118W59.572;
modify load_73.latitude 35N23.351; modify load_73.longitude 118W59.519;
modify load_74.latitude 35N23.335; modify load_74.longitude 118W59.451;
modify load_75.latitude 35N23.317; modify load_75.longitude 118W59.373;
modify load_76.latitude 35N23.331; modify load_76.longitude 118W59.572;
modify load_77.latitude 35N23.313; modify load_77.longitude 118W59.495;
modify node_78.latitude 35N23.308; modify node_78.longitude 118W59.475;
modify load_79.latitude 35N23.298; modify load_79.longitude 118W59.432;
modify load_80.latitude 35N23.233; modify load_80.longitude 118W59.502;
modify node_81.latitude 35N23.158; modify node_81.longitude 118W59.528;
modify load_82.latitude 35N23.118; modify load_82.longitude 118W59.542;
modify load_83.latitude 35N23.107; modify load_83.longitude 118W59.493;
modify load_84.latitude 35N23.127; modify load_84.longitude 118W59.397;
modify load_85.latitude 35N23.202; modify load_85.longitude 118W59.371;
modify load_86.latitude 35N23.216; modify load_86.longitude 118W59.572;
modify load_87.latitude 35N23.216; modify load_87.longitude 118W59.663;
modify load_88.latitude 35N23.243; modify load_88.longitude 118W59.653;
modify node_89.latitude 35N23.216; modify node_89.longitude 118W59.718;
modify load_90.latitude 35N23.251; modify load_90.longitude 118W59.706;
modify node_91.latitude 35N23.216; modify node_91.longitude 118W59.764;
modify load_92.latitude 35N23.263; modify load_92.longitude 118W59.747;
modify node_93.latitude 35N23.216; modify node_93.longitude 118W59.809;
modify load_94.latitude 35N23.259; modify load_94.longitude 118W59.794;
modify load_95.latitude 35N23.216; modify load_95.longitude 118W59.87;
modify load_96.latitude 35N23.249; modify load_96.longitude 118W59.87;
modify node_97.latitude 35N23.45; modify node_97.longitude 118W59.572;
modify load_98.latitude 35N23.45; modify load_98.longitude 118W59.517;
modify load_99.latitude 35N23.45; modify load_99.longitude 118W59.406;
modify load_100.latitude 35N23.45; modify load_100.longitude 118W59.345;
modify node_101.latitude 35N23.45; modify node_101.longitude 118W59.643;
modify load_102.latitude 35N23.45; modify load_102.longitude 118W59.597;
modify load_103.latitude 35N23.45; modify load_103.longitude 118W59.532;
modify load_104.latitude 35N23.45; modify load_104.longitude 118W59.391;
modify node_105.latitude 35N23.495; modify node_105.longitude 118W59.643;
modify load_106.latitude 35N23.495; modify load_106.longitude 118W59.597;
modify load_107.latitude 35N23.495; modify load_107.longitude 118W59.481;
modify node_108.latitude 35N23.549; modify node_108.longitude 118W59.643;
modify load_109.latitude 35N23.549; modify load_109.longitude 118W59.552;
modify node_110.latitude 35N23.549; modify node_110.longitude 118W59.491;
modify load_111.latitude 35N23.643; modify load_111.longitude 118W59.491;
modify load_112.latitude 35N23.549; modify load_112.longitude 118W59.466;
modify load_113.latitude 35N23.549; modify load_113.longitude 118W59.36;
modify load_114.latitude 35N23.549; modify load_114.longitude 118W59.295;
modify node_149.latitude 35N23.164; modify node_149.longitude 119W0.189;
modify node_151.latitude 35N23.409; modify node_151.longitude 118W59.643;
modify node_250.latitude 35N23.471; modify node_250.longitude 118W59.86;
modify node_300.latitude 35N23.409; modify node_300.longitude 118W59.643;
modify node_450.latitude 35N23.45; modify node_450.longitude 118W59.184;
modify node_150.latitude 35N23.164; modify node_150.longitude 119W0.189;
modify node_152.latitude 35N23.117; modify node_152.longitude 118W59.971;
modify node_160.latitude 35N23.409; modify node_160.longitude 118W59.572;
modify node_197.latitude 35N23.45; modify node_197.longitude 118W59.572;
modify cap_83.latitude 35N23.107; modify cap_83.longitude 118W59.493;
modify cap_88.latitude 35N23.243; modify cap_88.longitude 118W59.653;
modify cap_90.latitude 35N23.251; modify cap_90.longitude 118W59.706;
modify cap_92.latitude 35N23.263; modify cap_92.longitude 118W59.747;
modify node_610.latitude 35N23.116; modify node_610.longitude 118W59.572;
modify node_901.latitude 35N23.154; modify node_901.longitude 119W0.031;
modify node_2501.latitude 35N23.388; modify node_2501.longitude 118W59.971;
modify node_6101.latitude 35N23.116; modify node_6101.longitude 118W59.572;
modify node_15001.latitude 35N23.164; modify node_15001.longitude 119W0.189;
modify node_16001.latitude 35N23.141; modify node_16001.longitude 118W59.679;
modify node_135.latitude 35N23.253; modify node_135.longitude 118W59.971;


///////////////////////////////////////////////////////
//
// MYSQL DATABASE SUPPORT
//
///////////////////////////////////////////////////////
#ifdef MYSQL_ENABLE

#ifndef MYSQLHOST
#define MYSQLHOST=localhost
#endif // MYSQLHOST

module mysql {
	hostname "${MYSQLHOST}";
	username "gridlabd";
	password "gridlabd";
#ifdef SOCKETNAME
	socketname "${SOCKETNAME}";
#else
	port 3306;	
#endif // SOCKETNAME
}

#ifdef MYSQL_SCADA
object database {
	name scada;
	schema "${MYSQL_NAME}_scada";
}
#endif // MYSQL_SCADA

#ifdef MYSQL_AMI
object database {
	name ami;
	schema "${MYSQL_NAME}_ami";
}
#endif // MYSQL_AMOI
#endif // MYSQL_ENABLE

///////////////////////////////////////////////////////
//
// LOAD MODEL
//
///////////////////////////////////////////////////////
module residential;
object transformer_configuration {
	name xfmr_config;
	connect_type SINGLE_PHASE_CENTER_TAPPED;
	install_type POLETOP;
	powerA_rating 75;
	powerB_rating 75;
	powerC_rating 75;
	primary_voltage 2401;
	secondary_voltage 120.000;
	impedance 0.006+0.0136j;
}

global int32 SEQ_CUSTID 0;
#set allow_reinclude=true




// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 1 phase A to 4 houses
modify load_1.groupid area_A;
modify load_1.constant_power_A 0+0j;	
modify load_1.constant_current_A 0+0j;	
modify load_1.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_1;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_1A;
	phases AS;
	from load_1;
	to node_1A;
	configuration xfmr_config;
}
object triplex_node {
	name node_1A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_1;
	parent node_1A;
	phases AS;
	nominal_voltage 120;
	latitude (load_1.latitude);
	longitude (load_1.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 2 phase B to 2 houses
modify load_2.groupid area_A;
modify load_2.constant_power_B 0+0j;	
modify load_2.constant_current_B 0+0j;	
modify load_2.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_2;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_2B;
	phases BS;
	from load_2;
	to node_2B;
	configuration xfmr_config;
}
object triplex_node {
	name node_2B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_2;
	parent node_2B;
	phases BS;
	nominal_voltage 120;
	latitude (load_2.latitude);
	longitude (load_2.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 4 phase C to 4 houses
modify load_4.groupid area_A;
modify load_4.constant_power_C 0+0j;	
modify load_4.constant_current_C 0+0j;	
modify load_4.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_4;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_4C;
	phases CS;
	from load_4;
	to node_4C;
	configuration xfmr_config;
}
object triplex_node {
	name node_4C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_4;
	parent node_4C;
	phases CS;
	nominal_voltage 120;
	latitude (load_4.latitude);
	longitude (load_4.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 5 phase C to 2 houses
modify load_5.groupid area_A;
modify load_5.constant_power_C 0+0j;	
modify load_5.constant_current_C 0+0j;	
modify load_5.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_5;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_5C;
	phases CS;
	from load_5;
	to node_5C;
	configuration xfmr_config;
}
object triplex_node {
	name node_5C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_5;
	parent node_5C;
	phases CS;
	nominal_voltage 120;
	latitude (load_5.latitude);
	longitude (load_5.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 6 phase C to 4 houses
modify load_6.groupid area_A;
modify load_6.constant_power_C 0+0j;	
modify load_6.constant_current_C 0+0j;	
modify load_6.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_6;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_6C;
	phases CS;
	from load_6;
	to node_6C;
	configuration xfmr_config;
}
object triplex_node {
	name node_6C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_6;
	parent node_6C;
	phases CS;
	nominal_voltage 120;
	latitude (load_6.latitude);
	longitude (load_6.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 7 phase A to 2 houses
modify load_7.groupid area_A;
modify load_7.constant_power_A 0+0j;	
modify load_7.constant_current_A 0+0j;	
modify load_7.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_7;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_7A;
	phases AS;
	from load_7;
	to node_7A;
	configuration xfmr_config;
}
object triplex_node {
	name node_7A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_7;
	parent node_7A;
	phases AS;
	nominal_voltage 120;
	latitude (load_7.latitude);
	longitude (load_7.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 9 phase A to 4 houses
modify load_9.groupid area_A;
modify load_9.constant_power_A 0+0j;	
modify load_9.constant_current_A 0+0j;	
modify load_9.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_9;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_9A;
	phases AS;
	from load_9;
	to node_9A;
	configuration xfmr_config;
}
object triplex_node {
	name node_9A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_9;
	parent node_9A;
	phases AS;
	nominal_voltage 120;
	latitude (load_9.latitude);
	longitude (load_9.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 10 phase A to 2 houses
modify load_10.groupid area_A;
modify load_10.constant_power_A 0+0j;	
modify load_10.constant_current_A 0+0j;	
modify load_10.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_10;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_10A;
	phases AS;
	from load_10;
	to node_10A;
	configuration xfmr_config;
}
object triplex_node {
	name node_10A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_10;
	parent node_10A;
	phases AS;
	nominal_voltage 120;
	latitude (load_10.latitude);
	longitude (load_10.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 11 phase A to 4 houses
modify load_11.groupid area_A;
modify load_11.constant_power_A 0+0j;	
modify load_11.constant_current_A 0+0j;	
modify load_11.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_11;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_11A;
	phases AS;
	from load_11;
	to node_11A;
	configuration xfmr_config;
}
object triplex_node {
	name node_11A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_11;
	parent node_11A;
	phases AS;
	nominal_voltage 120;
	latitude (load_11.latitude);
	longitude (load_11.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 12 phase B to 2 houses
modify load_12.groupid area_A;
modify load_12.constant_power_B 0+0j;	
modify load_12.constant_current_B 0+0j;	
modify load_12.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_12;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_12B;
	phases BS;
	from load_12;
	to node_12B;
	configuration xfmr_config;
}
object triplex_node {
	name node_12B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_12;
	parent node_12B;
	phases BS;
	nominal_voltage 120;
	latitude (load_12.latitude);
	longitude (load_12.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 16 phase C to 4 houses
modify load_16.groupid area_A;
modify load_16.constant_power_C 0+0j;	
modify load_16.constant_current_C 0+0j;	
modify load_16.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_16;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_16C;
	phases CS;
	from load_16;
	to node_16C;
	configuration xfmr_config;
}
object triplex_node {
	name node_16C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_16;
	parent node_16C;
	phases CS;
	nominal_voltage 120;
	latitude (load_16.latitude);
	longitude (load_16.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 17 phase C to 2 houses
modify load_17.groupid area_A;
modify load_17.constant_power_C 0+0j;	
modify load_17.constant_current_C 0+0j;	
modify load_17.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_17;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_17C;
	phases CS;
	from load_17;
	to node_17C;
	configuration xfmr_config;
}
object triplex_node {
	name node_17C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_17;
	parent node_17C;
	phases CS;
	nominal_voltage 120;
	latitude (load_17.latitude);
	longitude (load_17.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 19 phase A to 4 houses
modify load_19.groupid area_A;
modify load_19.constant_power_A 0+0j;	
modify load_19.constant_current_A 0+0j;	
modify load_19.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_19;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_19A;
	phases AS;
	from load_19;
	to node_19A;
	configuration xfmr_config;
}
object triplex_node {
	name node_19A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_19;
	parent node_19A;
	phases AS;
	nominal_voltage 120;
	latitude (load_19.latitude);
	longitude (load_19.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



  
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 20 phase A to 4 houses
modify load_20.groupid area_A;
modify load_20.constant_power_A 0+0j;	
modify load_20.constant_current_A 0+0j;	
modify load_20.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_20;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_20A;
	phases AS;
	from load_20;
	to node_20A;
	configuration xfmr_config;
}
object triplex_node {
	name node_20A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_20;
	parent node_20A;
	phases AS;
	nominal_voltage 120;
	latitude (load_20.latitude);
	longitude (load_20.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 22 phase B to 4 houses
modify load_22.groupid area_A;
modify load_22.constant_power_B 0+0j;	
modify load_22.constant_current_B 0+0j;	
modify load_22.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_22;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_22B;
	phases BS;
	from load_22;
	to node_22B;
	configuration xfmr_config;
}
object triplex_node {
	name node_22B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_22;
	parent node_22B;
	phases BS;
	nominal_voltage 120;
	latitude (load_22.latitude);
	longitude (load_22.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 24 phase C to 4 houses
modify load_24.groupid area_A;
modify load_24.constant_power_C 0+0j;	
modify load_24.constant_current_C 0+0j;	
modify load_24.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_24;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_24C;
	phases CS;
	from load_24;
	to node_24C;
	configuration xfmr_config;
}
object triplex_node {
	name node_24C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_24;
	parent node_24C;
	phases CS;
	nominal_voltage 120;
	latitude (load_24.latitude);
	longitude (load_24.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 28 phase A to 4 houses
modify load_28.groupid area_A;
modify load_28.constant_power_A 0+0j;	
modify load_28.constant_current_A 0+0j;	
modify load_28.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_28;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_28A;
	phases AS;
	from load_28;
	to node_28A;
	configuration xfmr_config;
}
object triplex_node {
	name node_28A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_28;
	parent node_28A;
	phases AS;
	nominal_voltage 120;
	latitude (load_28.latitude);
	longitude (load_28.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 29 phase A to 4 houses
modify load_29.groupid area_A;
modify load_29.constant_power_A 0+0j;	
modify load_29.constant_current_A 0+0j;	
modify load_29.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_29;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_29A;
	phases AS;
	from load_29;
	to node_29A;
	configuration xfmr_config;
}
object triplex_node {
	name node_29A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_29;
	parent node_29A;
	phases AS;
	nominal_voltage 120;
	latitude (load_29.latitude);
	longitude (load_29.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 30 phase C to 4 houses
modify load_30.groupid area_A;
modify load_30.constant_power_C 0+0j;	
modify load_30.constant_current_C 0+0j;	
modify load_30.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_30;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_30C;
	phases CS;
	from load_30;
	to node_30C;
	configuration xfmr_config;
}
object triplex_node {
	name node_30C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_30;
	parent node_30C;
	phases CS;
	nominal_voltage 120;
	latitude (load_30.latitude);
	longitude (load_30.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 31 phase C to 2 houses
modify load_31.groupid area_A;
modify load_31.constant_power_C 0+0j;	
modify load_31.constant_current_C 0+0j;	
modify load_31.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_31;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_31C;
	phases CS;
	from load_31;
	to node_31C;
	configuration xfmr_config;
}
object triplex_node {
	name node_31C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_31;
	parent node_31C;
	phases CS;
	nominal_voltage 120;
	latitude (load_31.latitude);
	longitude (load_31.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 32 phase C to 2 houses
modify load_32.groupid area_A;
modify load_32.constant_power_C 0+0j;	
modify load_32.constant_current_C 0+0j;	
modify load_32.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_32;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_32C;
	phases CS;
	from load_32;
	to node_32C;
	configuration xfmr_config;
}
object triplex_node {
	name node_32C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_32;
	parent node_32C;
	phases CS;
	nominal_voltage 120;
	latitude (load_32.latitude);
	longitude (load_32.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



  
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 33 phase A to 4 houses
modify load_33.groupid area_A;
modify load_33.constant_power_A 0+0j;	
modify load_33.constant_current_A 0+0j;	
modify load_33.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_33;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_33A;
	phases AS;
	from load_33;
	to node_33A;
	configuration xfmr_config;
}
object triplex_node {
	name node_33A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_33;
	parent node_33A;
	phases AS;
	nominal_voltage 120;
	latitude (load_33.latitude);
	longitude (load_33.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



  
// connect dynamics load
#ifdef LOADS
#debug Converting area A static load 34 phase C to 4 houses
modify load_34.groupid area_A;
modify load_34.constant_power_C 0+0j;	
modify load_34.constant_current_C 0+0j;	
modify load_34.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_34;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_34C;
	phases CS;
	from load_34;
	to node_34C;
	configuration xfmr_config;
}
object triplex_node {
	name node_34C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_34;
	parent node_34C;
	phases CS;
	nominal_voltage 120;
	latitude (load_34.latitude);
	longitude (load_34.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 35 phase A to 4 houses
modify load_35.groupid area_B;
modify load_35.constant_power_A 0+0j;	
modify load_35.constant_current_A 0+0j;	
modify load_35.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_35;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_35A;
	phases AS;
	from load_35;
	to node_35A;
	configuration xfmr_config;
}
object triplex_node {
	name node_35A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_35;
	parent node_35A;
	phases AS;
	nominal_voltage 120;
	latitude (load_35.latitude);
	longitude (load_35.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};}
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 37 phase A to 4 houses
modify load_37.groupid area_B;
modify load_37.constant_power_A 0+0j;	
modify load_37.constant_current_A 0+0j;	
modify load_37.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_37;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_37A;
	phases AS;
	from load_37;
	to node_37A;
	configuration xfmr_config;
}
object triplex_node {
	name node_37A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_37;
	parent node_37A;
	phases AS;
	nominal_voltage 120;
	latitude (load_37.latitude);
	longitude (load_37.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 38 phase B to 2 houses
modify load_38.groupid area_B;
modify load_38.constant_power_B 0+0j;	
modify load_38.constant_current_B 0+0j;	
modify load_38.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_38;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_38B;
	phases BS;
	from load_38;
	to node_38B;
	configuration xfmr_config;
}
object triplex_node {
	name node_38B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_38;
	parent node_38B;
	phases BS;
	nominal_voltage 120;
	latitude (load_38.latitude);
	longitude (load_38.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 39 phase B to 2 houses
modify load_39.groupid area_B;
modify load_39.constant_power_B 0+0j;	
modify load_39.constant_current_B 0+0j;	
modify load_39.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_39;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_39B;
	phases BS;
	from load_39;
	to node_39B;
	configuration xfmr_config;
}
object triplex_node {
	name node_39B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_39;
	parent node_39B;
	phases BS;
	nominal_voltage 120;
	latitude (load_39.latitude);
	longitude (load_39.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 41 phase C to 2 houses
modify load_41.groupid area_B;
modify load_41.constant_power_C 0+0j;	
modify load_41.constant_current_C 0+0j;	
modify load_41.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_41;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_41C;
	phases CS;
	from load_41;
	to node_41C;
	configuration xfmr_config;
}
object triplex_node {
	name node_41C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_41;
	parent node_41C;
	phases CS;
	nominal_voltage 120;
	latitude (load_41.latitude);
	longitude (load_41.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 42 phase A to 2 houses
modify load_42.groupid area_B;
modify load_42.constant_power_A 0+0j;	
modify load_42.constant_current_A 0+0j;	
modify load_42.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_42;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_42A;
	phases AS;
	from load_42;
	to node_42A;
	configuration xfmr_config;
}
object triplex_node {
	name node_42A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_42;
	parent node_42A;
	phases AS;
	nominal_voltage 120;
	latitude (load_42.latitude);
	longitude (load_42.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 43 phase B to 4 houses
modify load_43.groupid area_B;
modify load_43.constant_power_B 0+0j;	
modify load_43.constant_current_B 0+0j;	
modify load_43.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_43;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_43B;
	phases BS;
	from load_43;
	to node_43B;
	configuration xfmr_config;
}
object triplex_node {
	name node_43B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_43;
	parent node_43B;
	phases BS;
	nominal_voltage 120;
	latitude (load_43.latitude);
	longitude (load_43.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 45 phase A to 2 houses
modify load_45.groupid area_B;
modify load_45.constant_power_A 0+0j;	
modify load_45.constant_current_A 0+0j;	
modify load_45.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_45;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_45A;
	phases AS;
	from load_45;
	to node_45A;
	configuration xfmr_config;
}
object triplex_node {
	name node_45A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_45;
	parent node_45A;
	phases AS;
	nominal_voltage 120;
	latitude (load_45.latitude);
	longitude (load_45.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 46 phase A to 2 houses
modify load_46.groupid area_B;
modify load_46.constant_power_A 0+0j;	
modify load_46.constant_current_A 0+0j;	
modify load_46.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_46;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_46A;
	phases AS;
	from load_46;
	to node_46A;
	configuration xfmr_config;
}
object triplex_node {
	name node_46A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_46;
	parent node_46A;
	phases AS;
	nominal_voltage 120;
	latitude (load_46.latitude);
	longitude (load_46.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 47 phase A to 3 houses
modify load_47.groupid area_B;
modify load_47.constant_power_A 0+0j;	
modify load_47.constant_current_A 0+0j;	
modify load_47.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_47;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_47A;
	phases AS;
	from load_47;
	to node_47A;
	configuration xfmr_config;
}
object triplex_node {
	name node_47A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_47;
	parent node_47A;
	phases AS;
	nominal_voltage 120;
	latitude (load_47.latitude);
	longitude (load_47.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 47 phase B to 3 houses
modify load_47.groupid area_B;
modify load_47.constant_power_B 0+0j;	
modify load_47.constant_current_B 0+0j;	
modify load_47.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_47;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_47B;
	phases BS;
	from load_47;
	to node_47B;
	configuration xfmr_config;
}
object triplex_node {
	name node_47B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_47;
	parent node_47B;
	phases BS;
	nominal_voltage 120;
	latitude (load_47.latitude);
	longitude (load_47.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 47 phase C to 3 houses
modify load_47.groupid area_B;
modify load_47.constant_power_C 0+0j;	
modify load_47.constant_current_C 0+0j;	
modify load_47.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_47;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_47C;
	phases CS;
	from load_47;
	to node_47C;
	configuration xfmr_config;
}
object triplex_node {
	name node_47C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_47;
	parent node_47C;
	phases CS;
	nominal_voltage 120;
	latitude (load_47.latitude);
	longitude (load_47.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 48 phase A to 7 houses
modify load_48.groupid area_B;
modify load_48.constant_power_A 0+0j;	
modify load_48.constant_current_A 0+0j;	
modify load_48.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_48;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_48A;
	phases AS;
	from load_48;
	to node_48A;
	configuration xfmr_config;
}
object triplex_node {
	name node_48A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_48;
	parent node_48A;
	phases AS;
	nominal_voltage 120;
	latitude (load_48.latitude);
	longitude (load_48.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 48 phase B to 7 houses
modify load_48.groupid area_B;
modify load_48.constant_power_B 0+0j;	
modify load_48.constant_current_B 0+0j;	
modify load_48.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_48;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_48B;
	phases BS;
	from load_48;
	to node_48B;
	configuration xfmr_config;
}
object triplex_node {
	name node_48B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_48;
	parent node_48B;
	phases BS;
	nominal_voltage 120;
	latitude (load_48.latitude);
	longitude (load_48.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 48 phase C to 7 houses
modify load_48.groupid area_B;
modify load_48.constant_power_C 0+0j;	
modify load_48.constant_current_C 0+0j;	
modify load_48.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_48;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_48C;
	phases CS;
	from load_48;
	to node_48C;
	configuration xfmr_config;
}
object triplex_node {
	name node_48C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_48;
	parent node_48C;
	phases CS;
	nominal_voltage 120;
	latitude (load_48.latitude);
	longitude (load_48.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 49 phase A to 3 houses
modify load_49.groupid area_B;
modify load_49.constant_power_A 0+0j;	
modify load_49.constant_current_A 0+0j;	
modify load_49.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_49;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_49A;
	phases AS;
	from load_49;
	to node_49A;
	configuration xfmr_config;
}
object triplex_node {
	name node_49A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_49;
	parent node_49A;
	phases AS;
	nominal_voltage 120;
	latitude (load_49.latitude);
	longitude (load_49.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 49 phase B to 7 houses
modify load_49.groupid area_B;
modify load_49.constant_power_B 0+0j;	
modify load_49.constant_current_B 0+0j;	
modify load_49.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_49;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_49B;
	phases BS;
	from load_49;
	to node_49B;
	configuration xfmr_config;
}
object triplex_node {
	name node_49B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_49;
	parent node_49B;
	phases BS;
	nominal_voltage 120;
	latitude (load_49.latitude);
	longitude (load_49.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 49 phase C to 3 houses
modify load_49.groupid area_B;
modify load_49.constant_power_C 0+0j;	
modify load_49.constant_current_C 0+0j;	
modify load_49.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_49;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_49C;
	phases CS;
	from load_49;
	to node_49C;
	configuration xfmr_config;
}
object triplex_node {
	name node_49C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_49;
	parent node_49C;
	phases CS;
	nominal_voltage 120;
	latitude (load_49.latitude);
	longitude (load_49.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 50 phase C to 4 houses
modify load_50.groupid area_B;
modify load_50.constant_power_C 0+0j;	
modify load_50.constant_current_C 0+0j;	
modify load_50.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_50;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_50C;
	phases CS;
	from load_50;
	to node_50C;
	configuration xfmr_config;
}
object triplex_node {
	name node_50C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_50;
	parent node_50C;
	phases CS;
	nominal_voltage 120;
	latitude (load_50.latitude);
	longitude (load_50.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area B static load 51 phase A to 2 houses
modify load_51.groupid area_B;
modify load_51.constant_power_A 0+0j;	
modify load_51.constant_current_A 0+0j;	
modify load_51.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_51;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_51A;
	phases AS;
	from load_51;
	to node_51A;
	configuration xfmr_config;
}
object triplex_node {
	name node_51A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_51;
	parent node_51A;
	phases AS;
	nominal_voltage 120;
	latitude (load_51.latitude);
	longitude (load_51.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PV
#ifndef PVPROB
			generator_status ONLINE;
#else

			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 52 phase A to 4 houses
modify load_52.groupid area_C;
modify load_52.constant_power_A 0+0j;	
modify load_52.constant_current_A 0+0j;	
modify load_52.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_52;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_52A;
	phases AS;
	from load_52;
	to node_52A;
	configuration xfmr_config;
}
object triplex_node {
	name node_52A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_52;
	parent node_52A;
	phases AS;
	nominal_voltage 120;
	latitude (load_52.latitude);
	longitude (load_52.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 53 phase A to 4 houses
modify load_53.groupid area_C;
modify load_53.constant_power_A 0+0j;	
modify load_53.constant_current_A 0+0j;	
modify load_53.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_53;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_53A;
	phases AS;
	from load_53;
	to node_53A;
	configuration xfmr_config;
}
object triplex_node {
	name node_53A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_53;
	parent node_53A;
	phases AS;
	nominal_voltage 120;
	latitude (load_53.latitude);
	longitude (load_53.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 55 phase A to 2 houses
modify load_55.groupid area_C;
modify load_55.constant_power_A 0+0j;	
modify load_55.constant_current_A 0+0j;	
modify load_55.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_55;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_55A;
	phases AS;
	from load_55;
	to node_55A;
	configuration xfmr_config;
}
object triplex_node {
	name node_55A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_55;
	parent node_55A;
	phases AS;
	nominal_voltage 120;
	latitude (load_55.latitude);
	longitude (load_55.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 56 phase B to 2 houses
modify load_56.groupid area_C;
modify load_56.constant_power_B 0+0j;	
modify load_56.constant_current_B 0+0j;	
modify load_56.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_56;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_56B;
	phases BS;
	from load_56;
	to node_56B;
	configuration xfmr_config;
}
object triplex_node {
	name node_56B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_56;
	parent node_56B;
	phases BS;
	nominal_voltage 120;
	latitude (load_56.latitude);
	longitude (load_56.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 58 phase B to 2 houses
modify load_58.groupid area_C;
modify load_58.constant_power_B 0+0j;	
modify load_58.constant_current_B 0+0j;	
modify load_58.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_58;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_58B;
	phases BS;
	from load_58;
	to node_58B;
	configuration xfmr_config;
}
object triplex_node {
	name node_58B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_58;
	parent node_58B;
	phases BS;
	nominal_voltage 120;
	latitude (load_58.latitude);
	longitude (load_58.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 59 phase B to 2 houses
modify load_59.groupid area_C;
modify load_59.constant_power_B 0+0j;	
modify load_59.constant_current_B 0+0j;	
modify load_59.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_59;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_59B;
	phases BS;
	from load_59;
	to node_59B;
	configuration xfmr_config;
}
object triplex_node {
	name node_59B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_59;
	parent node_59B;
	phases BS;
	nominal_voltage 120;
	latitude (load_59.latitude);
	longitude (load_59.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 60 phase A to 2 houses
modify load_60.groupid area_C;
modify load_60.constant_power_A 0+0j;	
modify load_60.constant_current_A 0+0j;	
modify load_60.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_60;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_60A;
	phases AS;
	from load_60;
	to node_60A;
	configuration xfmr_config;
}
object triplex_node {
	name node_60A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_60;
	parent node_60A;
	phases AS;
	nominal_voltage 120;
	latitude (load_60.latitude);
	longitude (load_60.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 62 phase C to 4 houses
modify load_62.groupid area_C;
modify load_62.constant_power_C 0+0j;	
modify load_62.constant_current_C 0+0j;	
modify load_62.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_62;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_62C;
	phases CS;
	from load_62;
	to node_62C;
	configuration xfmr_config;
}
object triplex_node {
	name node_62C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_62;
	parent node_62C;
	phases CS;
	nominal_voltage 120;
	latitude (load_62.latitude);
	longitude (load_62.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 63 phase A to 4 houses
modify load_63.groupid area_C;
modify load_63.constant_power_A 0+0j;	
modify load_63.constant_current_A 0+0j;	
modify load_63.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_63;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_63A;
	phases AS;
	from load_63;
	to node_63A;
	configuration xfmr_config;
}
object triplex_node {
	name node_63A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_63;
	parent node_63A;
	phases AS;
	nominal_voltage 120;
	latitude (load_63.latitude);
	longitude (load_63.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 64 phase B to 7 houses
modify load_64.groupid area_C;
modify load_64.constant_power_B 0+0j;	
modify load_64.constant_current_B 0+0j;	
modify load_64.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_64;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_64B;
	phases BS;
	from load_64;
	to node_64B;
	configuration xfmr_config;
}
object triplex_node {
	name node_64B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_64;
	parent node_64B;
	phases BS;
	nominal_voltage 120;
	latitude (load_64.latitude);
	longitude (load_64.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 65 phase A to 3 houses
modify load_65.groupid area_C;
modify load_65.constant_power_A 0+0j;	
modify load_65.constant_current_A 0+0j;	
modify load_65.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_65;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_65A;
	phases AS;
	from load_65;
	to node_65A;
	configuration xfmr_config;
}
object triplex_node {
	name node_65A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_65;
	parent node_65A;
	phases AS;
	nominal_voltage 120;
	latitude (load_65.latitude);
	longitude (load_65.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 65 phase B to 3 houses
modify load_65.groupid area_C;
modify load_65.constant_power_B 0+0j;	
modify load_65.constant_current_B 0+0j;	
modify load_65.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_65;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_65B;
	phases BS;
	from load_65;
	to node_65B;
	configuration xfmr_config;
}
object triplex_node {
	name node_65B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..3 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_65;
	parent node_65B;
	phases BS;
	nominal_voltage 120;
	latitude (load_65.latitude);
	longitude (load_65.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 65 phase C to 7 houses
modify load_65.groupid area_C;
modify load_65.constant_power_C 0+0j;	
modify load_65.constant_current_C 0+0j;	
modify load_65.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_65;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_65C;
	phases CS;
	from load_65;
	to node_65C;
	configuration xfmr_config;
}
object triplex_node {
	name node_65C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_65;
	parent node_65C;
	phases CS;
	nominal_voltage 120;
	latitude (load_65.latitude);
	longitude (load_65.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area C static load 66 phase C to 7 houses
modify load_66.groupid area_C;
modify load_66.constant_power_C 0+0j;	
modify load_66.constant_current_C 0+0j;	
modify load_66.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_66;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_66C;
	phases CS;
	from load_66;
	to node_66C;
	configuration xfmr_config;
}
object triplex_node {
	name node_66C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_66;
	parent node_66C;
	phases CS;
	nominal_voltage 120;
	latitude (load_66.latitude);
	longitude (load_66.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 68 phase A to 2 houses
modify load_68.groupid area_D;
modify load_68.constant_power_A 0+0j;	
modify load_68.constant_current_A 0+0j;	
modify load_68.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_68;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_68A;
	phases AS;
	from load_68;
	to node_68A;
	configuration xfmr_config;
}
object triplex_node {
	name node_68A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_68;
	parent node_68A;
	phases AS;
	nominal_voltage 120;
	latitude (load_68.latitude);
	longitude (load_68.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 69 phase A to 4 houses
modify load_69.groupid area_D;
modify load_69.constant_power_A 0+0j;	
modify load_69.constant_current_A 0+0j;	
modify load_69.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_69;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_69A;
	phases AS;
	from load_69;
	to node_69A;
	configuration xfmr_config;
}
object triplex_node {
	name node_69A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_69;
	parent node_69A;
	phases AS;
	nominal_voltage 120;
	latitude (load_69.latitude);
	longitude (load_69.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 70 phase A to 2 houses
modify load_70.groupid area_D;
modify load_70.constant_power_A 0+0j;	
modify load_70.constant_current_A 0+0j;	
modify load_70.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_70;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_70A;
	phases AS;
	from load_70;
	to node_70A;
	configuration xfmr_config;
}
object triplex_node {
	name node_70A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_70;
	parent node_70A;
	phases AS;
	nominal_voltage 120;
	latitude (load_70.latitude);
	longitude (load_70.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 71 phase A to 4 houses
modify load_71.groupid area_D;
modify load_71.constant_power_A 0+0j;	
modify load_71.constant_current_A 0+0j;	
modify load_71.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_71;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_71A;
	phases AS;
	from load_71;
	to node_71A;
	configuration xfmr_config;
}
object triplex_node {
	name node_71A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_71;
	parent node_71A;
	phases AS;
	nominal_voltage 120;
	latitude (load_71.latitude);
	longitude (load_71.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 73 phase C to 4 houses
modify load_73.groupid area_D;
modify load_73.constant_power_C 0+0j;	
modify load_73.constant_current_C 0+0j;	
modify load_73.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_73;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_73C;
	phases CS;
	from load_73;
	to node_73C;
	configuration xfmr_config;
}
object triplex_node {
	name node_73C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_73;
	parent node_73C;
	phases CS;
	nominal_voltage 120;
	latitude (load_73.latitude);
	longitude (load_73.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 74 phase C to 4 houses
modify load_74.groupid area_D;
modify load_74.constant_power_C 0+0j;	
modify load_74.constant_current_C 0+0j;	
modify load_74.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_74;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_74C;
	phases CS;
	from load_74;
	to node_74C;
	configuration xfmr_config;
}
object triplex_node {
	name node_74C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_74;
	parent node_74C;
	phases CS;
	nominal_voltage 120;
	latitude (load_74.latitude);
	longitude (load_74.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 75 phase C to 4 houses
modify load_75.groupid area_D;
modify load_75.constant_power_C 0+0j;	
modify load_75.constant_current_C 0+0j;	
modify load_75.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_75;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_75C;
	phases CS;
	from load_75;
	to node_75C;
	configuration xfmr_config;
}
object triplex_node {
	name node_75C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_75;
	parent node_75C;
	phases CS;
	nominal_voltage 120;
	latitude (load_75.latitude);
	longitude (load_75.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 76 phase A to 10 houses
modify load_76.groupid area_D;
modify load_76.constant_power_A 0+0j;	
modify load_76.constant_current_A 0+0j;	
modify load_76.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_76;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_76A;
	phases AS;
	from load_76;
	to node_76A;
	configuration xfmr_config;
}
object triplex_node {
	name node_76A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..10 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_76;
	parent node_76A;
	phases AS;
	nominal_voltage 120;
	latitude (load_76.latitude);
	longitude (load_76.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 76 phase B to 7 houses
modify load_76.groupid area_D;
modify load_76.constant_power_B 0+0j;	
modify load_76.constant_current_B 0+0j;	
modify load_76.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_76;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_76B;
	phases BS;
	from load_76;
	to node_76B;
	configuration xfmr_config;
}
object triplex_node {
	name node_76B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_76;
	parent node_76B;
	phases BS;
	nominal_voltage 120;
	latitude (load_76.latitude);
	longitude (load_76.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 76 phase C to 7 houses
modify load_76.groupid area_D;
modify load_76.constant_power_C 0+0j;	
modify load_76.constant_current_C 0+0j;	
modify load_76.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_76;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_76C;
	phases CS;
	from load_76;
	to node_76C;
	configuration xfmr_config;
}
object triplex_node {
	name node_76C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..7 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_76;
	parent node_76C;
	phases CS;
	nominal_voltage 120;
	latitude (load_76.latitude);
	longitude (load_76.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 77 phase B to 4 houses
modify load_77.groupid area_D;
modify load_77.constant_power_B 0+0j;	
modify load_77.constant_current_B 0+0j;	
modify load_77.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_77;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_77B;
	phases BS;
	from load_77;
	to node_77B;
	configuration xfmr_config;
}
object triplex_node {
	name node_77B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_77;
	parent node_77B;
	phases BS;
	nominal_voltage 120;
	latitude (load_77.latitude);
	longitude (load_77.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 79 phase A to 4 houses
modify load_79.groupid area_D;
modify load_79.constant_power_A 0+0j;	
modify load_79.constant_current_A 0+0j;	
modify load_79.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_79;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_79A;
	phases AS;
	from load_79;
	to node_79A;
	configuration xfmr_config;
}
object triplex_node {
	name node_79A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_79;
	parent node_79A;
	phases AS;
	nominal_voltage 120;
	latitude (load_79.latitude);
	longitude (load_79.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 80 phase B to 4 houses
modify load_80.groupid area_D;
modify load_80.constant_power_B 0+0j;	
modify load_80.constant_current_B 0+0j;	
modify load_80.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_80;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_80B;
	phases BS;
	from load_80;
	to node_80B;
	configuration xfmr_config;
}
object triplex_node {
	name node_80B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_80;
	parent node_80B;
	phases BS;
	nominal_voltage 120;
	latitude (load_80.latitude);
	longitude (load_80.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 82 phase A to 4 houses
modify load_82.groupid area_D;
modify load_82.constant_power_A 0+0j;	
modify load_82.constant_current_A 0+0j;	
modify load_82.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_82;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_82A;
	phases AS;
	from load_82;
	to node_82A;
	configuration xfmr_config;
}
object triplex_node {
	name node_82A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_82;
	parent node_82A;
	phases AS;
	nominal_voltage 120;
	latitude (load_82.latitude);
	longitude (load_82.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 83 phase C to 2 houses
modify load_83.groupid area_D;
modify load_83.constant_power_C 0+0j;	
modify load_83.constant_current_C 0+0j;	
modify load_83.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_83;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_83C;
	phases CS;
	from load_83;
	to node_83C;
	configuration xfmr_config;
}
object triplex_node {
	name node_83C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_83;
	parent node_83C;
	phases CS;
	nominal_voltage 120;
	latitude (load_83.latitude);
	longitude (load_83.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 84 phase C to 2 houses
modify load_84.groupid area_D;
modify load_84.constant_power_C 0+0j;	
modify load_84.constant_current_C 0+0j;	
modify load_84.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_84;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_84C;
	phases CS;
	from load_84;
	to node_84C;
	configuration xfmr_config;
}
object triplex_node {
	name node_84C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_84;
	parent node_84C;
	phases CS;
	nominal_voltage 120;
	latitude (load_84.latitude);
	longitude (load_84.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 85 phase C to 4 houses
modify load_85.groupid area_D;
modify load_85.constant_power_C 0+0j;	
modify load_85.constant_current_C 0+0j;	
modify load_85.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_85;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_85C;
	phases CS;
	from load_85;
	to node_85C;
	configuration xfmr_config;
}
object triplex_node {
	name node_85C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_85;
	parent node_85C;
	phases CS;
	nominal_voltage 120;
	latitude (load_85.latitude);
	longitude (load_85.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 86 phase B to 2 houses
modify load_86.groupid area_D;
modify load_86.constant_power_B 0+0j;	
modify load_86.constant_current_B 0+0j;	
modify load_86.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_86;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_86B;
	phases BS;
	from load_86;
	to node_86B;
	configuration xfmr_config;
}
object triplex_node {
	name node_86B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_86;
	parent node_86B;
	phases BS;
	nominal_voltage 120;
	latitude (load_86.latitude);
	longitude (load_86.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 87 phase B to 4 houses
modify load_87.groupid area_D;
modify load_87.constant_power_B 0+0j;	
modify load_87.constant_current_B 0+0j;	
modify load_87.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_87;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_87B;
	phases BS;
	from load_87;
	to node_87B;
	configuration xfmr_config;
}
object triplex_node {
	name node_87B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_87;
	parent node_87B;
	phases BS;
	nominal_voltage 120;
	latitude (load_87.latitude);
	longitude (load_87.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 88 phase A to 4 houses
modify load_88.groupid area_D;
modify load_88.constant_power_A 0+0j;	
modify load_88.constant_current_A 0+0j;	
modify load_88.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_88;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_88A;
	phases AS;
	from load_88;
	to node_88A;
	configuration xfmr_config;
}
object triplex_node {
	name node_88A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_88;
	parent node_88A;
	phases AS;
	nominal_voltage 120;
	latitude (load_88.latitude);
	longitude (load_88.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 90 phase B to 4 houses
modify load_90.groupid area_D;
modify load_90.constant_power_B 0+0j;	
modify load_90.constant_current_B 0+0j;	
modify load_90.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_90;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_90B;
	phases BS;
	from load_90;
	to node_90B;
	configuration xfmr_config;
}
object triplex_node {
	name node_90B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_90;
	parent node_90B;
	phases BS;
	nominal_voltage 120;
	latitude (load_90.latitude);
	longitude (load_90.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 92 phase C to 4 houses
modify load_92.groupid area_D;
modify load_92.constant_power_C 0+0j;	
modify load_92.constant_current_C 0+0j;	
modify load_92.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_92;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_92C;
	phases CS;
	from load_92;
	to node_92C;
	configuration xfmr_config;
}
object triplex_node {
	name node_92C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_92;
	parent node_92C;
	phases CS;
	nominal_voltage 120;
	latitude (load_92.latitude);
	longitude (load_92.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 94 phase A to 4 houses
modify load_94.groupid area_D;
modify load_94.constant_power_A 0+0j;	
modify load_94.constant_current_A 0+0j;	
modify load_94.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_94;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_94A;
	phases AS;
	from load_94;
	to node_94A;
	configuration xfmr_config;
}
object triplex_node {
	name node_94A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_94;
	parent node_94A;
	phases AS;
	nominal_voltage 120;
	latitude (load_94.latitude);
	longitude (load_94.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 95 phase B to 2 houses
modify load_95.groupid area_D;
modify load_95.constant_power_B 0+0j;	
modify load_95.constant_current_B 0+0j;	
modify load_95.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_95;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_95B;
	phases BS;
	from load_95;
	to node_95B;
	configuration xfmr_config;
}
object triplex_node {
	name node_95B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_95;
	parent node_95B;
	phases BS;
	nominal_voltage 120;
	latitude (load_95.latitude);
	longitude (load_95.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 96 phase B to 2 houses
modify load_96.groupid area_D;
modify load_96.constant_power_B 0+0j;	
modify load_96.constant_current_B 0+0j;	
modify load_96.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_96;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_96B;
	phases BS;
	from load_96;
	to node_96B;
	configuration xfmr_config;
}
object triplex_node {
	name node_96B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_96;
	parent node_96B;
	phases BS;
	nominal_voltage 120;
	latitude (load_96.latitude);
	longitude (load_96.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 98 phase A to 4 houses
modify load_98.groupid area_D;
modify load_98.constant_power_A 0+0j;	
modify load_98.constant_current_A 0+0j;	
modify load_98.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_98;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_98A;
	phases AS;
	from load_98;
	to node_98A;
	configuration xfmr_config;
}
object triplex_node {
	name node_98A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_98;
	parent node_98A;
	phases AS;
	nominal_voltage 120;
	latitude (load_98.latitude);
	longitude (load_98.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 99 phase B to 4 houses
modify load_99.groupid area_D;
modify load_99.constant_power_B 0+0j;	
modify load_99.constant_current_B 0+0j;	
modify load_99.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_99;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_99B;
	phases BS;
	from load_99;
	to node_99B;
	configuration xfmr_config;
}
object triplex_node {
	name node_99B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_99;
	parent node_99B;
	phases BS;
	nominal_voltage 120;
	latitude (load_99.latitude);
	longitude (load_99.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD




 
// connect dynamics load
#ifdef LOADS
#debug Converting area D static load 100 phase C to 4 houses
modify load_100.groupid area_D;
modify load_100.constant_power_C 0+0j;	
modify load_100.constant_current_C 0+0j;	
modify load_100.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_100;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_100C;
	phases CS;
	from load_100;
	to node_100C;
	configuration xfmr_config;
}
object triplex_node {
	name node_100C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_100;
	parent node_100C;
	phases CS;
	nominal_voltage 120;
	latitude (load_100.latitude);
	longitude (load_100.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD



 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 102 phase C to 2 houses
modify load_102.groupid area_E;
modify load_102.constant_power_C 0+0j;	
modify load_102.constant_current_C 0+0j;	
modify load_102.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_102;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_102C;
	phases CS;
	from load_102;
	to node_102C;
	configuration xfmr_config;
}
object triplex_node {
	name node_102C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_102;
	parent node_102C;
	phases CS;
	nominal_voltage 120;
	latitude (load_102.latitude);
	longitude (load_102.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 103 phase C to 4 houses
modify load_103.groupid area_E;
modify load_103.constant_power_C 0+0j;	
modify load_103.constant_current_C 0+0j;	
modify load_103.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_103;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_103C;
	phases CS;
	from load_103;
	to node_103C;
	configuration xfmr_config;
}
object triplex_node {
	name node_103C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_103;
	parent node_103C;
	phases CS;
	nominal_voltage 120;
	latitude (load_103.latitude);
	longitude (load_103.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 104 phase C to 4 houses
modify load_104.groupid area_E;
modify load_104.constant_power_C 0+0j;	
modify load_104.constant_current_C 0+0j;	
modify load_104.constant_impedance_C 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_104;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_104C;
	phases CS;
	from load_104;
	to node_104C;
	configuration xfmr_config;
}
object triplex_node {
	name node_104C;
	phases CS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_104;
	parent node_104C;
	phases CS;
	nominal_voltage 120;
	latitude (load_104.latitude);
	longitude (load_104.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases CS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases CS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 106 phase B to 4 houses
modify load_106.groupid area_E;
modify load_106.constant_power_B 0+0j;	
modify load_106.constant_current_B 0+0j;	
modify load_106.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_106;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_106B;
	phases BS;
	from load_106;
	to node_106B;
	configuration xfmr_config;
}
object triplex_node {
	name node_106B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_106;
	parent node_106B;
	phases BS;
	nominal_voltage 120;
	latitude (load_106.latitude);
	longitude (load_106.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 107 phase B to 4 houses
modify load_107.groupid area_E;
modify load_107.constant_power_B 0+0j;	
modify load_107.constant_current_B 0+0j;	
modify load_107.constant_impedance_B 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_107;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_107B;
	phases BS;
	from load_107;
	to node_107B;
	configuration xfmr_config;
}
object triplex_node {
	name node_107B;
	phases BS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_107;
	parent node_107B;
	phases BS;
	nominal_voltage 120;
	latitude (load_107.latitude);
	longitude (load_107.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases BS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases BS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 109 phase A to 4 houses
modify load_109.groupid area_E;
modify load_109.constant_power_A 0+0j;	
modify load_109.constant_current_A 0+0j;	
modify load_109.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_109;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_109A;
	phases AS;
	from load_109;
	to node_109A;
	configuration xfmr_config;
}
object triplex_node {
	name node_109A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_109;
	parent node_109A;
	phases AS;
	nominal_voltage 120;
	latitude (load_109.latitude);
	longitude (load_109.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 111 phase A to 2 houses
modify load_111.groupid area_E;
modify load_111.constant_power_A 0+0j;	
modify load_111.constant_current_A 0+0j;	
modify load_111.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_111;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_111A;
	phases AS;
	from load_111;
	to node_111A;
	configuration xfmr_config;
}
object triplex_node {
	name node_111A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_111;
	parent node_111A;
	phases AS;
	nominal_voltage 120;
	latitude (load_111.latitude);
	longitude (load_111.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 112 phase A to 2 houses
modify load_112.groupid area_E;
modify load_112.constant_power_A 0+0j;	
modify load_112.constant_current_A 0+0j;	
modify load_112.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_112;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_112A;
	phases AS;
	from load_112;
	to node_112A;
	configuration xfmr_config;
}
object triplex_node {
	name node_112A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_112;
	parent node_112A;
	phases AS;
	nominal_voltage 120;
	latitude (load_112.latitude);
	longitude (load_112.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 113 phase A to 4 houses
modify load_113.groupid area_E;
modify load_113.constant_power_A 0+0j;	
modify load_113.constant_current_A 0+0j;	
modify load_113.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_113;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_113A;
	phases AS;
	from load_113;
	to node_113A;
	configuration xfmr_config;
}
object triplex_node {
	name node_113A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..4 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_113;
	parent node_113A;
	phases AS;
	nominal_voltage 120;
	latitude (load_113.latitude);
	longitude (load_113.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


 
// connect dynamics load
#ifdef LOADS
#debug Converting area E static load 114 phase A to 2 houses
modify load_114.groupid area_E;
modify load_114.constant_power_A 0+0j;	
modify load_114.constant_current_A 0+0j;	
modify load_114.constant_impedance_A 0+0j;	
#define XLOAD=yes
#else
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
object recorder {
	parent load_114;
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval 900;
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#endif // LOADS

// add solar panel installation rank
#ifdef SOLAR
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_114A;
	phases AS;
	from load_114;
	to node_114A;
	configuration xfmr_config;
}
object triplex_node {
	name node_114A;
	phases AS;
	nominal_voltage 120;
}
object triplex_meter:..2 { 
	name `meter_{SEQ_CUSTID:INC}`;
	groupid load_114;
	parent node_114A;
	phases AS;
	nominal_voltage 120;
	latitude (load_114.latitude);
	longitude (load_114.longitude);
#ifdef LOADS
	object house { 
		floor_area random.triangle(1000,2000);
		name `house_{SEQ_CUSTID}`;
	}; 
#endif // LOADS
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval 900;
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
#ifdef SOLAR
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases AS;
		rated_power 25000;	
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases AS;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE; 
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval 60;
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
		};
#ifdef MYSQL_ENABLE
#ifdef MYSQL_AMI
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval 60;
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
#endif // MYSQL_ENABLE
	};
#endif // SOLAR
}
#endif // XLOAD


#define NHOUSES=${SEQ_CUSTID}


///////////////////////////////////////////////////////
//
// DATA COLLECTION
//
///////////////////////////////////////////////////////

#ifdef MYSQL_ENABLE
//
// SCADA recorders
//
#ifdef MYSQL_SCADA
// TODO: add regulator and capbank controllers

//
// Switches
//
object recorder {
        connection scada;
        table switch;
        parent sw13to152;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw18to135;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw54to94;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw60to160;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw61to6101;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw97to197;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
	connection scada;
	table switch;
	parent sw151to300;
    property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
    interval 4;
    header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw15001to149;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw250to251;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw300to350;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw450to451;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

object recorder {
        connection scada;
        table switch;
        parent sw95to195;
        property "phase_A_state,phase_B_state,phase_C_state,current_in_A,current_in_B,current_in_C";
        interval 4;
        header_fieldnames "name";
}

//
// Regulators
//
object recorder {
        connection scada;
        table regulator;
        parent reg150to15001;
        property "power_in,power_out,tap_A,tap_B,tap_C";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table regulator;
        parent reg9to901;
        property "power_in,power_out,tap_A,tap_B,tap_C";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table regulator;
        parent reg25to2501;
        property "power_in,power_out,tap_A,tap_B,tap_C";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table regulator;
        parent reg160to16001;
        property "power_in,power_out,tap_A,tap_B,tap_C";
        interval 4;
        header_fieldnames "name";
}

//
// Capacitors
//
object recorder {
        connection scada;
        table capacitor;
        parent cap_83;
        property "voltage_A,voltage_B,voltage_C,switchA,switchB,switchC";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table capacitor;
        parent cap_88;
        property "voltage_A,switchA";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table capacitor;
        parent cap_90;
        property "voltage_B,switchB";
        interval 4;
        header_fieldnames "name";
}
object recorder {
        connection scada;
        table capacitor;
        parent cap_92;
        property "voltage_C,switchC";
        interval 4;
        header_fieldnames "name";
}

#endif // MYSQL_SCADA
#endif // MYSQL_ENABLE

///////////////////////////////////////////////////////
//
// CONTROLS
//
///////////////////////////////////////////////////////
//
// Line sensors
//
module gismo;

//
// Line sensors
//
object line_sensor {
	name sensor13to18A;
	parent line13to18;
	measured_phase A;
	location 200 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor51to151A;
	parent line51to151;
	measured_phase A;
	location 250 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor57to60A;
	parent line57to60;
	measured_phase A;
	location 700 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA;
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor67to97A;
	parent line67to97;
	measured_phase A;
	location 50 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor76to86A;
	parent line76to86;
	measured_phase A;
	location 350 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}

object line_sensor {
	name sensor13to18B;
	parent line13to18;
	measured_phase B;
	location 200 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor51to151B;
	parent line51to151;
	measured_phase B;
	location 250 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor57to60B;
	parent line57to60;
	measured_phase B;
	location 700 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA;
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor67to97B;
	parent line67to97;
	measured_phase B;
	location 50 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor76to86B;
	parent line76to86;
	measured_phase B;
	location 350 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}


// IEEE 123 line sensors
// Copyright (C) 2016, Stanford University
// Author: dchassin@slac.stanford.edu
//
module gismo;

//
// Line sensors
//
object line_sensor {
	name sensor13to18C;
	parent line13to18;
	measured_phase C;
	location 200 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor51to151C;
	parent line51to151;
	measured_phase C;
	location 250 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor57to60C;
	parent line57to60;
	measured_phase C;
	location 700 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA;
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor67to97C;
	parent line67to97;
	measured_phase C;
	location 50 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}
object line_sensor {
	name sensor76to86C;
	parent line76to86;
	measured_phase C;
	location 350 ft;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
	        connection scada;
	        table sensor;
	        property "measured_voltage,measured_current,measured_power";
	        interval 4;
	        header_fieldnames "name";
	};
#endif
#endif
}


//
// Switch coordinator
//
object switch_coordinator {
	name scheme_1;
	connect sw13to152;
	connect sw18to135;
	connect sw54to94;
	connect sw60to160;
	connect sw61to6101;
	connect sw97to197;
	connect sw151to300;
	connect sw15001to149;
	connect sw250to251;
	connect sw300to350;
	connect sw450to451;
	connect sw95to195;
#ifdef MYSQL_ENABLE
#ifdef MYSQL_SCADA
	object recorder {
		connection scada;
		table control;
		property "armed,status";
		interval -1;
		header_fieldnames "name";
	};
#endif
#endif
}


///////////////////////////////////////////////////////
//
// MODEL EXPORT
//
///////////////////////////////////////////////////////

#ifdef MYSQL_ENABLE

#ifdef MYSQL_MODEL

#ifndef STOPTIME
#print dumping model to '${MYSQL_MODEL}_model'
export mysql ${MYSQL_NAME}_model;
#endif // MYSQL_MODEL

#ifdef MYSQL_GRAPH
#print dumping graph to '${MYSQL_NAME}_graph'
export mysql --graph ${MYSQL_NAME}_graph;
#endif // MYSQL_GRAPH

#endif // STOPTIME

#endif // MYSQL_ENABLE

///////////////////////////////////////////////////////
//
// HISTORICAL RUN NOTICE
//
///////////////////////////////////////////////////////
#ifndef STARTTIME
#print starting realtime simulation at ${TODAY}
#else
#print starting historical simulation from ${STARTTIME} to ${STOPTIME}
#set show_progress=1
#endif