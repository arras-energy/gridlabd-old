// $Id$
//
// This test can be started either from the client or the server script.
// Each will automatically start the other to provide the other side of
// the test.  
//

// specify how long to wait after server start (in seconds)
#define wait=1

// #ifdef PYTHON
// // use python server
// #print Starting pything server...
// #system start python json_link_demo.py --udp --port=39036
// #sleep ${wait}000
// #print Server started...
// #else

// #ifndef NOSERVER
// // use gridlabd server
// #print Starting gridlabd server...
// #ifdef WINDOWS
// #system "start ${exename} -D verbose=${verbose} -D debug=${debug} -D NOCLIENT=1 test_json_server.glm"
// #else
// #system "${exename} -D verbose=${verbose} -D debug=${debug} -D NOCLIENT=1 test_json_server.glm &"
// #endif
// #print Waiting ${wait} seconds...
// #sleep ${wait}000
// #print Server started...
// #endif

// #endif

#set maximum_synctime=300;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-03 00:00:00';
}

module market;
module connection
{
	security STANDARD;
	lockout 1 min;
}

schedule buyer_price1 {
	* 0-1 * * * 40;   // buyers with same bids, different quantities, enough supply*
	* 2-3 * * * 50;   // buyers with different bids, same quantities, enough supply*
	* 4-5 * * * 40;   // buyers with same bids, different quantities, not enough supply*
	* 6-7 * * * 45;   // buyers with different bids, same quantities, not enough supply*
	* 8-9 * * * 40;   // buyers with same bids, same quantities, not enough supply*
	* 10-11 * * * 40; // buyers with same bids, same quantities, enough supply*
	* 12-13 * * * 40; // seller with enough supply
	* 14-15 * * * 40; // seller with enough supply
	* 16-17 * * * 40; // seller with not enough supply
	* 18-19 * * * 50; // seller with not enough supply
	* 20-21 * * * 40; // seller with not enough supply
	* 22-23 * * * 40; // seller with enough supply
}

schedule buyer_quantity1 {
	* 0-1 * * * 6;   // buyers with same bids, different quantities, enough supply
	* 2-3 * * * 5;   // buyers with different bids, same quantities, enough supply
	* 4-5 * * * 5;   // buyers with same bids, different quantities, not enough supply
	* 6-7 * * * 3;   // buyers with different bids, same quantities, not enough supply
	* 8-9 * * * 5.5;   // buyers with same bids, same quantities, not enough supply
	* 10-11 * * * 4; // buyers with same bids, same quantities, enough supply
	* 12-13 * * * 4; // seller with enough supply
	* 14-15 * * * 4; // seller with enough supply
	* 16-17 * * * 4; // seller with not enough supply
	* 18-19 * * * 4; // seller with not enough supply
	* 20-21 * * * 4; // seller with not enough supply
	* 22-23 * * * 4; // seller with enough supply
}

class shadow_auction{
	double clear_price;
	int64 market_id;
}

object shadow_auction {
	name Market_1;
	clear_price 23;
	market_id 4;
}


object json {
	link "init:Market_1.clear_price -> var1";
	link "init:Market_1.market_id <- y";
	link "function:shadow_auction/submit_bid_state -> auction/submit_bid_state";
	option "connection:client,udp";
	option "transport:hostname afisher, port 39037, timeout 1000, on_error retry, maxretry none";
}

class auction {
	double current_price_mean_24h;
	double current_price_stdev_24h;
}

object auction {
	name market2;
	unit MWh;
	period 3600;
	verbose FALSE;
	special_mode NONE;
	warmup 0;
	init_price 51;
	init_stdev 1e-6;
}

object stub_bidder {
	name buyer_1;
	role BUYER;
	bid_period 1800;
	market Market_1;
	price buyer_price1*1;
	quantity buyer_quantity1*1;
	count 10000;
}