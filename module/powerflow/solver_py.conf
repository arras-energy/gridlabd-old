# solver_py.conf
#
#   This file manages the python solver configution.
#   It is loaded when the solver is initialized.
#   Settings are processed in the order in which they are received.
#

#
# logfile
#
#   Defines the log file to use when storing log data.
#   The default is /usr/local/var/gridlabd/solver_py.log
#

#logfile ./solver_py.log

#
# loglevel
#
#   Defines the level of log report stored in the log.
#   The default is 0 (errors only).
#
#     -1 blocks logging
#      0 only errors
#      1 first level log entries
#      2 second level log entries
#      ...
#      9 all log entries
#

#loglevel 9

#
# solver
#
#   Controls the functionality of the python solver.
#   The default is disable.
#
#   Use enable to enable the python solver.

#solver enable

#
# import_path
#
#   Specifies the path to search instead of default python path when importing
#   the python solver.
#

#import_path ..

#
# import (required)
#
#   Specifies the name of the python solver module to import. This module
#   must contain definitions of the `solve` and `learn` methods.  See
#   `solver_py.py` for an example.
#

#import solver_py

#
# busdump
#
#   Specify the file into which the bus data is dumped.
#   The default is none.
#
#   Placing a + in front of the filename causes the dumps
#   to append to the file instead of clearing a new file for each dump.
# 

#busdump ./solver_bus.csv

#
# branchdump
#
#   Specify the file into which the branch data is dumped.
#   The default is none.
#
#   Placing a + in front of the filename causes the dumps
#   to append to the file instead of clearing a new file for each dump.
# 

#branchdump ./solver_branch.csv

#
# on_dump
#
#   Specifies the function to call after a dump is completed.
#   The default is none.
#
#   The function must be defined in the python solver module.
# 
#on_dump check_dumps

#
# busdata
#
# This identifies which bus data items are copied to the solver
#

#busdata type,phases,vbase,mvabase,origphases,busflags,VAr,VAi,VBr,VBi,VCr,VCi,VAm,VBm,VCm,VAa,VBa,VCa,VAd,VBd,VCd,SAi,SBr,SBi,SCr,SCi,YAr,YAi,YBr,YBi,YCr,YCi,IAr,IAi,IBr,IBi,ICr,ICi,prerot_IAr,prerot_IAi,prerot_IBr,prerot_IBi,prerot_ICr,prerot_ICi,S_dyAr,S_dyAi,S_dyBr,S_dyBi,S_dyCr,S_dyCi,Y_dyAr,Y_dyAi,Y_dyBr,Y_dyBi,Y_dyCr,Y_dyCi,I_dyAr,I_dyAi,I_dyBr,I_dyBi,I_dyCr,I_dyCi,PGenTotalAr,PGenTotalAi,PGenTotalBr,PGenTotalBi,PGenTotalCr,PGenTotalCi,DynCurrentAr,DynCurrentAi,DynCurrentBr,DynCurrentBi,DynCurrentCr,DynCurrentCi,PLA,QLA,PLB,QLB,PLC,QLC,full_YAAr,full_YAAi,full_YABr,full_YABi,full_YcACr,full_YcACi,full_YcBBr,full_YcBBi,full_YcBCr,full_YcBCu,full_YcCCr,YcCCi,full_Y_allAAr,full_Y_allAAi,full_Y_allABr,full_Y_allABi,full_Y_allACr,full_Y_allACi,full_Y_allBBr,full_Y_allBBi,full_Y_allBCr,full_Y_allBCi,full_Y_allCCr,YsCCi,full_Y_loadAr,full_Y_loadAi,full_Y_loadBr,full_Y_loadBi,full_Y_loadCr,full_Y_loadCi,Jacob_A0,Jacob_A1,Jacob_A2,Jacob_B0,Jacob_B1,Jacob_B2,Jacob_C0,JCacob_1,Jacob_C2,Jacob_D0,Jacob_D1,Jacob_D2

#
# branchdata
#
#   This identifies which branch data items are copied to the solver
#
#   Use the same tag format as for busdata to control how the data is copied.
#

#branchdata phases,from,to,origphases,faultphases,lnk_type,fault_link_below,v_ratio,YfromAr,YfromAi,YfromBr,YfromBi,YfromCr,YfromCi,YtoAr,YtoAi,YtoBr,YtoBi,YtoCr,YtoCi,YSfromAr,YSfromAi,YSfromBr,YSfromBi,YSfromCr,YSfromCi,YStoAr,YStoAi,YStoBr,YStoBi,YStoCr,YStoCi

#
# learndata
#
#   This identifies which learning data is copied to the 'learn' method. See the
#   data structure for the NR powerflow (powerflow/solver_nr.h) for details.
#

#   All powerflow solution data
#learndata powerflow_values

# Selected powerflow solution data
#learndata powerflow_values.deltaI_NR,powerflow_values.BA_diag,powerflow_values.Y_offdiag_PQ,powerflow_values.Y_diag_fixed,powerflow_values.Y_diag_update,powerflow_values.Y_Amatrix

#
# profiler
#

#profiler solver_py.csv

