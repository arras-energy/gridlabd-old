"""Convert Schneider ION meter data to GLM players
"""
import os, sys
import pandas as pd

default_options = dict(
    csv_index = "Timestamp UTC",
    csv_source = "Measurement",
    csv_value = "Value",

    csv_real_power = "Real Power",
    csv_reactive_power = "Reactive Power",

    player_index = "timestamp",
    player_suffix = "_player.csv",

    complex_format = "{0.real:g}{0.imag:+g}j"
)

def convert(inputfile,outputfile,options=default_options):

    for key,value in default_options.items():
        if key not in options:
            options[key] = value

    PATHNAME = os.path.splitext(outputfile)[0]
    BASENAME = os.path.basename(PATHNAME)
    PLAYERFILE = PATHNAME+options['player_suffix']
    GLMFILE = BASENAME + ".glm"

    data = pd.read_csv(inputfile,parse_dates=[options['csv_index']]).pivot(options['csv_index'],options['csv_source'],options['csv_value'])
    data.index.name = options['player_index']
    
    P = data.loc[:,options['csv_real_power']]
    Q = data.loc[:,options['csv_reactive_power']]
    S = list(map(lambda x: options['complex_format'].format(x),(P + Q*1j) / 3.0))

    player = pd.DataFrame({
        "constant_power_A":S,
        "constant_power_B":S,
        "constant_power_C":S,
        }, index = data.index)
    player.to_csv(PLAYERFILE,header=False,index=options['player_index'])

    with open(GLMFILE,"w") as glm:
        glm.write(f'''// generated by {' '.join(sys.argv)}
module tape;
object player
{{
    parent "{BASENAME}";
    property "{','.join(player.columns)}";
    file "{PLAYERFILE}";
}}
''')
