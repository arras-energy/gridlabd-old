"""Convert Schneider ION meter data to GLM players

Converter options:

- `csv_index`: specify the index column (default `Timestamp UTC`)

- `csv_source`: specify the source column (default `Measurement`)

- `csv_value`: specify value column (default `Value`)

- `csv_compression`: specify the file compression format (default `None`)

- `csv_real_power`: specify the real power measurement name (default `Real Power`)

- `csv_reactive_power`: specify the reactive power measurement name (default `Reactive Power`)

- `glm_with_load`: include load in the GLM output (default `False`)

- `glm_with_meter`: include meter in the GLM output (default `False`)

- `player_index`: specify the index column in the player file (default `timestamp`)

- `player_suffix`: specify the player file suffix (default `_player.csv`)

- `player_complex_format`: specify the complex power output format (default `{0.real:g}{0.imag:+g}j`)


"""
import os, sys
import pandas as pd

default_options = dict(
    csv_index = "Timestamp UTC",
    csv_source = "Measurement",
    csv_value = "Value",
    csv_compression = None,
    csv_real_power = "Real Power",
    csv_reactive_power = "Reactive Power",

    player_index = "timestamp",
    player_suffix = "_player.csv",
    player_complex_format = "{0.real:g}{0.imag:+g}j",

    glm_with_load = False,
    glm_with_meter = False,
)

def convert(inputfile,outputfile,options=default_options):

    print("DEBUG [csv-schneider2glm-player]: ",inputfile,outputfile,options)
    for key,value in default_options.items():
        if key not in options:
            options[key] = value

    PATHNAME = os.path.splitext(outputfile)[0]
    BASENAME = os.path.basename(PATHNAME)
    PLAYERFILE = PATHNAME+options['player_suffix']
    GLMFILE = BASENAME + ".glm"

    data = pd.read_csv(inputfile,parse_dates=[options['csv_index']],compression=options['csv_compression']).pivot(options['csv_index'],options['csv_source'],options['csv_value'])
    data.index.name = options['player_index']
    
    P = data.loc[:,options['csv_real_power']]
    Q = data.loc[:,options['csv_reactive_power']]
    S = list(map(lambda x: options['player_complex_format'].format(x),(P + Q*1j) / 3.0))

    player = pd.DataFrame({
        "constant_power_A":S,
        "constant_power_B":S,
        "constant_power_C":S,
        }, index = data.index)
    player.to_csv(PLAYERFILE,header=False,index=options['player_index'])

    with open(GLMFILE,"w") as glm:
        glm.write(f'''// generated by {" ".join(sys.argv)}
module tape;
''')
        if options['glm_with_meter'] or options['glm_with_load']:
            glm.write(f'''module powerflow;
''')

        if options['glm_with_meter']:
            glm.write(f'''object meter
{{
    parent "{BASENAME}";
    object load
    {{
        object player
        {{
            property "{','.join(player.columns)}";
            file "{PLAYERFILE}";
        }};
    }};
}}
''')
        
        elif options['glm_with_load']:
            glm.write(f'''object load
{{
    parent "{BASENAME}";
    object player
    {{
        property "{','.join(player.columns)}";
        file "{PLAYERFILE}";
    }};
}}
''')
        else:
            glm.write(f'''object player
{{
    parent "{BASENAME}";
    property "{','.join(player.columns)}";
    file "{PLAYERFILE}";
}}
''')
