#! /bin/sh
# Generated from gridlabd.m4sh by GNU Autoconf 2.71.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
as_nop=:
if test ${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else $as_nop
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi



# Reset variables that may have inherited troublesome values from
# the environment.

# IFS needs to be set, to space, tab, and newline, in precisely that order.
# (If _AS_PATH_WALK were called with IFS unset, it would have the
# side effect of setting IFS to empty, thus disabling word splitting.)
# Quoting is to prevent editors from complaining about space-tab.
as_nl='
'
export as_nl
IFS=" ""	$as_nl"

PS1='$ '
PS2='> '
PS4='+ '

# Ensure predictable behavior from utilities with locale-dependent output.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# We cannot yet rely on "unset" to work, but we need these variables
# to be unset--not just set to an empty or harmless value--now, to
# avoid bugs in old shells (e.g. pre-3.0 UWIN ksh).  This construct
# also avoids known problems related to "unset" and subshell syntax
# in other old shells (e.g. bash 2.01 and pdksh 5.2.14).
for as_var in BASH_ENV ENV MAIL MAILPATH CDPATH
do eval test \${$as_var+y} \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done

# Ensure that fds 0, 1, and 2 are open.
if (exec 3>&0) 2>/dev/null; then :; else exec 0</dev/null; fi
if (exec 3>&1) 2>/dev/null; then :; else exec 1>/dev/null; fi
if (exec 3>&2)            ; then :; else exec 2>/dev/null; fi

# The user is always right.
if ${PATH_SEPARATOR+false} :; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -r "$as_dir$0" && as_myself=$as_dir$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  printf "%s\n" "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi


if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="as_nop=:
if test \${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else \$as_nop
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" )
then :

else \$as_nop
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
blah=\$(echo \$(echo blah))
test x\"\$blah\" = xblah || exit 1
test -x / || exit 1"
  as_suggested=""
  if (eval "$as_required") 2>/dev/null
then :
  as_have_required=yes
else $as_nop
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null
then :

else $as_nop
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    as_run=a "$as_shell" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   break 2
fi
	   done;;
       esac
  as_found=false
done
IFS=$as_save_IFS
if $as_found
then :

else $as_nop
  if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      as_run=a "$SHELL" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi
fi


      if test "x$CONFIG_SHELL" != x
then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
printf "%s\n" "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno
then :
  printf "%s\n" "$0: This script requires a shell more modern than all"
  printf "%s\n" "$0: the shells that I found on your system."
  if test ${ZSH_VERSION+y} ; then
    printf "%s\n" "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    printf "%s\n" "$0: be upgraded to zsh 4.3.4 or later."
  else
    printf "%s\n" "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_nop
# ---------
# Do nothing but, unlike ":", preserve the value of $?.
as_fn_nop ()
{
  return $?
}
as_nop=as_fn_nop

## -------------------- ##
## Main body of script. ##
## -------------------- ##


prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
datarootdir="@datarootdir@"
datadir="@datadir@"
docdir="@datadir@/doc"
pkgdatadir="$datadir/@PACKAGE@"
libdir="@libdir@"
pkglibdir="$libdir/@PACKAGE@"
HAS_MINGW="@HAS_MINGW@"

HAS_DOCKER="no"
which docker > /dev/null 2>&1 && HAS_DOCKER="yes"
if test "x$1" = "xdocker" ; then :
  if test "x$HAS_DOCKER" = "xno"; then :
    echo "ERROR: docker is not installed"
    exit 1
  elif test "x$2" = "xhelp"; then :
    echo "Syntax: gridlabd docker <command>"
    echo "Valid commands:"
    echo "  help             get a list of available docker control commands"
    echo "  enable <image>   enable a docker image as the active image"
    echo "  disable          disable the active image"
    echo "  status           list the gridlabd images (active image is called 'gridlabd')"
    exit 0
  elif test "x$2" = "xenable"; then :
    if test $# -eq 3; then :
      docker inspect $3 > /dev/null 2>&1 || docker pull $3
      docker tag $3 gridlabd
      docker images | head -n 1
      docker images | grep gridlabd
      exit 0
    else
      echo "ERROR: missing docker image name"
      exit 1
    fi
  elif test "x$2" = "xdisable" ; then :
    docker rmi gridlabd > /dev/null 2>&1
    docker images | head -n 1
    docker images | grep gridlabd
    exit 0
  elif test "x$2" = "xstatus" ; then :
    docker images | head -n 1
    docker images | grep gridlabd
    exit 0
  else
    echo "Syntax: gridlabd --docker <command>|help"
    exit 1
  fi
fi
if test "x$HAS_DOCKER" = "xyes" ; then :
  HAS_IMAGE="no"
  docker inspect gridlabd > /dev/null 2>&1 && HAS_IMAGE="yes"
  if test "x$HAS_IMAGE" = "xyes" ; then :
    docker run -it -v ${PWD}:${PWD} gridlabd /usr/local/bin/gridlabd -W ${PWD} $@
    exit 0
  fi
fi

export GLD_ETC=$pkgdatadir
export GLD_BIN=$bindir
export GLD_LIB=$libdir
export GLD_DOC=$docdir
export PYCCFLAGS="$(/usr/local/bin/python3-config --cflags)"
export INCLUDE="-I$GLD_ETC -I/usr/local/include -I/usr/include"
export CFLAGS="${INCLUDE} ${PYCCFLAGS} ${CFLAGS}"
export CCFLAGS="${INCLUDE} ${PYCCFLAGS} ${CCFLAGS}"
export CPPFLAGS="${INCLUDE} ${PYCCFLAGS} ${CPPFLAGS}"
export CXXFLAGS="${INCLUDE} ${PYCCFLAGS} ${CXXFLAGS}"
export PYLDFLAGS="$(/usr/local/bin/python3-config --ldflags)"
export LIB="-L$libdir -L/usr/local/lib -L/usr/lib"
export LDFLAGS="${LIB} ${PYLDFLAGS} ${LDFLAGS}"
export PYTHONPATH=.:${GLD_ETC}${PYTHONPATH:+:}${PYTHONPATH}

if test "x$GLPATH" = x
then :
  export GLPATH="$pkglibdir:$pkgdatadir"
else $as_nop
  export GLPATH="$pkglibdir:$pkgdatadir:$GLPATH"
fi

if test "x$1" = "xgdb" ; then :
  shift
  gdb -ex "run $@" $bindir/gridlabd.bin
  exit 0
elif test "x$1" = "xlldb" ; then :
  shift
  echo "run $@" > /tmp/gridlabd-$$
  lldb -s /tmp/gridlabd-$$ $bindir/gridlabd.bin
  rm /tmp/gridlabd-$$
  exit 0
elif test "x$1" = "xvalgrind" ; then :
  shift
  if test -z "${VALGRIND_OPTIONS}" ; then :
    echo "WARNING: VALGRIND_OPTIONS is not set, using default valgrind options"
  fi
  valgrind ${VALGRIND_OPTIONS} $bindir/gridlabd.bin $@
  exit 0
fi

if test -f "${pkgdatadir}/gridlabd.rc"
then :
  . ${pkgdatadir}/gridlabd.rc
fi

if test -x "${bindir}/gridlabd-$1"
then :
  "${bindir}/gridlabd"-"$@"
else $as_nop
  "${bindir}/gridlabd.bin" "$@" && "${bindir}/gridlabd-version" check -w
fi
