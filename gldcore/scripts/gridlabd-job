#!/usr/local/bin/python3
#
# This script runs multiple jobs as specified by the controlfile.csv, 
# where the columns are the globals and rows are the job number.

import sys, os
import pandas as pd
import subprocess
from multiprocessing import pool, freeze_support
import curses

SYNTAX="Syntax: gridlabd job [-v|--verbose] [-q|--quiet] [-d|--debug] [-j|--jobfile JOBFILE] [-w|--workdir FOLDER] [-c|--configfile CONFIG] [-m|--modifyfile MODIFY] [-T|--threadcount NTHREADS] FILE1 ..."
VERBOSE=False
DEBUG=False
QUIET=False
DEBUG=False
JOBFILE="gridlabd-job.csv"
CFGFILE="gridlabd-config.glm"
MODFILE="gridlabd-modify.glm"
WORKDIR=os.getcwd()
THREADS=1
JOBPOOL=None
GLMLIST=[]
NJOBS=0
NMSGS=0
JOBDATA=None

def error(code,msg):
	text = f"ERROR [job]: {msg}"
	if DEBUG or code == None:
		raise Exception(text)
	else:
		print(text,file=sys.stderr)
	exit(code)

def warning(msg):
	if not QUIET:
		text = f"WARNING [job]: {msg}"
		print(text,file=sys.stderr)

def verbose(msg):
	if VERBOSE:
		text = f"VERBOSE [job]: {msg}"
		print(text,file=sys.stderr)

def output(msg):
	if not QUIET:
		print(msg,file=sys.stdout)

def runjob(jobid):
	cfgfile = f"job{jobid}-{CFGFILE}"
	verbose(f"writing '{cfgfile}'")
	with open(cfgfile,"w") as cfg:
		print(f"// job {jobid} configuration for {GLMLIST}",file=cfg)
		print(f"#define JOBID={jobid}",file=cfg)
		print(f"#set strictnames=FALSE",file=cfg)
		for var in JOBDATA.columns:
			value = JOBDATA[var][jobid]
			print(f"#define {var}={value}",file=cfg)
	args = ["gridlabd",cfgfile]
	args.extend(GLMLIST)
	if os.path.exists(MODFILE):
		args.append(MODFILE)
	elif MODFILE != "gridlabd-modify.glm":
		error(f"{MODFILE} does not exist")
	verbose(f"running '{' '.join(args)}'")
	result = subprocess.run(args,capture_output=True,encoding="utf-8")
	if result.stdout:
		output(result.stdout.strip())
	if result.stderr:
		error(None,result.stderr.strip())
	return result

def initializer(verbose,debug,quiet,jobfile,cfgfile,modfile,workdir,glmlist,jobdata):
	global VERBOSE
	VERBOSE = verbose
	global DEBUG
	DEBUG = debug
	global QUIET
	QUIET = quiet
	global JOBFILE
	JOBFILE = jobfile
	global CFGFILE
	CFGFILE = cfgfile
	global MODFILE
	MODFILE = modfile
	global WORKDIR
	WORKDIR = workdir
	global GLMLIST
	GLMLIST = glmlist
	global JOBDATA
	JOBDATA = jobdata

if __name__ == "__main__":
	n = 1
	while n < len(sys.argv):
		if sys.argv[n] in ["-h","--help"]:
			print(SYNTAX,file=sys.stderr)
			quit(0)
		elif sys.argv[n] in ["-d","--debug"]:
			DEBUG=True
			verbose("debug mode enabled")
		elif sys.argv[n] in ["-v","--verbose"]:
			VERBOSE=True
			verbose("verbose mode enabled")
		elif sys.argv[n] in ["-q","--quiet"]:
			QUIET=True
			verbose("quiet mode enabled")
		elif sys.argv[n] in ["-d","--debug"]:
			DEBUG=True
			verbose("debug mode enabled")
		elif sys.argv[n] in ["-j","--jobfile"]:
			n+=1
			JOBFILE=sys.argv[n]
			verbose(f"using control file {JOBFILE}")
		elif sys.argv[n] in ["-c","--configfile"]:
			n+=1
			CFGFILE=sys.argv[n]
			verbose(f"using GLM configuration file {CFGFILE}")
		elif sys.argv[n] in ["-m","--modifyfile"]:
			n+=1
			MODFILE=sys.argv[n]
			verbose(f"using GLM modify file {MODFILE}")
		elif sys.argv[n] in ["-w","--workdir"]:
			n+=1
			WORKDIR=sys.argv[n]
			verbose(f"using working directory {WORKDIR}")
		elif sys.argv[n] in ["-T","--threadcount"]:
			n+=1
			THREADS=int(sys.argv[n])
		else:
			GLMLIST.append(sys.argv[n])
		n+=1

	try:
		verbose(f"changing to '{WORKDIR}'")
		os.chdir(WORKDIR)
		verbose(f"reading '{JOBFILE}'")
		JOBDATA = pd.read_csv(JOBFILE)
		freeze_support()
		if THREADS == 0:
			THREADS = os.cpu_count()
		elif THREADS > os.cpu_count():
			warning(f"request for {THREADS} threads exceeds maximum {os.cpu_count()} CPUs available")
		if THREADS > 1:
			JOBPOOL=pool.Pool(THREADS,initializer,[
				VERBOSE,
				DEBUG,
				QUIET,
				JOBFILE,
				CFGFILE,
				MODFILE,
				WORKDIR,
				GLMLIST,
				JOBDATA,
				])
			verbose(f"starting pool for {JOBDATA.index}")
			JOBPOOL.map(runjob,JOBDATA.index)
		else:
			for jobid in JOBDATA.index:
				runjob(jobid)

	except Exception as err:
		error(-1,err)
		if DEBUG: 
			raise

