// check numpy version (must be exactly the same to pass these tests)
#assert ! $(gridlabd matrix version) '<' '1.21.0'

// matrix operations test
#assert $(gridlabd matrix -f copy "1,2;3,4") == '1,2;3,4'
#assert $(echo "1,2;3,4" | gridlabd matrix -f -t transpose) == '1,2;3,4'
#assert $(gridlabd matrix -f -r=a,b -c=c,d -t copy "1,2;3,4") == ',c,d;a,1,3;b,2,4'
#assert $(gridlabd matrix -f -r=a,b -c=c,d -n=test -t copy "1,2;3,4") == 'test,c,d;a,1,3;b,2,4'
#assert $(gridlabd matrix -f hstack "1,2;3,4" "1,2;3,4") == '1,2,1,2;3,4,3,4'
#assert $(gridlabd matrix -f vstack "1,2;3,4" "1,2;3,4") == '1,2;3,4;1,2;3,4'

// absolute
#assert $(gridlabd matrix -f absolute "1,2;-3,4") == '1,2;3,4'

// add
#assert $(gridlabd matrix -f add "1,2;3,4;5,6" "1,2;3,4;5,6") == '2,4;6,8;10,12'

// angle
#assert $(gridlabd matrix -f angle "1+1j,1+2j;1-3j,1-4j") == '0.78539816,1.1071487;-1.2490458,-1.3258177'
#assert $(gridlabd matrix -f angle "1+1j,1+2j;1-3j,1-4j" deg=0) == '0.78539816,1.1071487;-1.2490458,-1.3258177'
#assert $(gridlabd matrix -f angle "1+1j,1+2j;1-3j,1-4j" deg=1) == '45,63.434949;-71.565051,-75.963757'

// arc{cos,sin,tan}[h]
#assert $(gridlabd matrix -f arccos "0.1,0.2;0.3,0.4") == '1.4706289,1.3694384;1.2661037,1.1592795'
#assert $(gridlabd matrix -f arccosh "1,2;3,4") == '0,1.3169579;1.7627472,2.0634371'
#assert $(gridlabd matrix -f arcsin "0.1,0.2;0.3,0.4") == '0.10016742,0.20135792;0.30469265,0.41151685'
#assert $(gridlabd matrix -f arcsinh "1,2;3,4") == '0.88137359,1.4436355;1.8184465,2.0947125'
#assert $(gridlabd matrix -f arctan "0.1,0.2;0.3,0.4") == '0.099668652,0.19739556;0.29145679,0.38050638'
#assert $(gridlabd matrix -f arcsinh "1,2;3,4") == '0.88137359,1.4436355;1.8184465,2.0947125'
#assert $(gridlabd matrix -f arctanh "0.1,0.2;0.3,0.4") == '0.10033535,0.20273255;0.3095196,0.42364893'
#assert $(gridlabd matrix -f arctan2 "1,2;-3,-4" "1,-2;-3,4") == '0.78539816,2.3561945;-2.3561945,-0.78539816'

// around
#assert $(gridlabd matrix -f around "1.234,2.3452;-3.456,-4.567") == '1,2;-3,-5'
#assert $(gridlabd matrix -f around "1.234,2.3452;-3.456,-4.567" decimals=2) == '1.23,2.35;-3.46,-4.57'

// cbrt
#assert $(gridlabd matrix -f cbrt "1,2;3,4;5,6;") == '1,1.259921;1.4422496,1.5874011;1.7099759,1.8171206'

// ceil
#assert $(gridlabd matrix -f ceil "1.234,2.3452;-3.456,-4.567") == '2,3;-3,-4'

// clip
#assert $(gridlabd matrix -f clip "1.234,2.3452;-3.456,-4.567" a_min=-4 a_max=2) == '1.234,2;-3.456,-4'

// conj,conjugate
#assert $(gridlabd matrix -f conj "1+1j,1+2j;1-3j,1-4j") == '1-1j,1-2j;1+3j,1+4j'
#assert $(gridlabd matrix -f conjugate "1-1j,1-2j;1+3j,1+4j") == '1+1j,1+2j;1-3j,1-4j'

// convolve
#assert $(gridlabd matrix -f convolve "1,2;3,4" "2,3;4,5") == '2,7,16,30,34,31,20'
#assert $(gridlabd matrix -f convolve "1,2;3,4" "2,3;4,5" mode='full') == '2,7,16,30,34,31,20'
#assert $(gridlabd matrix -f convolve "1,2;3,4" "2,3;4,5" mode='same') == '7,16,30,34'
#assert $(gridlabd matrix -f convolve "1,2;3,4" "2,3;4,5" mode='valid') == '30'

// copysign
#assert $(gridlabd matrix -f copysign "1,2;3,4;5,6;" "-1,1;1,-1;-1,-1") == '-1,2;3,-4;-5,-6'

// cos[h]
#assert $(gridlabd matrix -f cos "1,2;3,4;5,6;") == '0.54030231,-0.41614684;-0.9899925,-0.65364362;0.28366219,0.96017029'
#assert $(gridlabd matrix -f cosh "1,2;3,4;5,6;") == '1.5430806,3.7621957;10.067662,27.308233;74.209949,201.71564'

// cross
#assert $(gridlabd matrix -f cross "1,2;3,4;5,6;" "2,1;4,3;6,5") == '-3,-7,-11'
#assert $(gridlabd matrix -f cross "1,2;3,4;5,6;" "2,1;4,3;6,5" axis=0) == '-2,2;4,-4;-2,2'
#assert $(gridlabd matrix -f cross "1,2;3,4;5,6;" "2,1;4,3;6,5" axisa=0 axisb=0) == '-2,4,-2;2,-4,2'

// cumprod
#assert $(gridlabd matrix -f cumprod "1,2;3,4;5,6") == '1,2,6,24,120,720'
#assert $(gridlabd matrix -f cumprod "1,2;3,4;5,6" axis=0) == '1,2;3,8;15,48'
#assert $(gridlabd matrix -f cumprod "1,2;3,4;5,6" axis=1) == '1,2;3,12;5,30'

// cumsum
#assert $(gridlabd matrix -f cumsum "1,2;3,4;5,6") == '1,3,6,10,15,21'
#assert $(gridlabd matrix -f cumsum "1,2;3,4;5,6" axis=0) == '1,2;4,6;9,12'
#assert $(gridlabd matrix -f cumsum "1,2;3,4;5,6" axis=1) == '1,3;3,7;5,11'

// deg2rad 
#assert $(gridlabd matrix -f deg2rad '1,2;3,4;5,6') == '0.017453293,0.034906585;0.052359878,0.06981317;0.087266463,0.10471976'

// degrees
#assert $(gridlabd matrix -f degrees '1,2;3,4;5,6') == '57.29578,114.59156;171.88734,229.18312;286.4789,343.77468'

// diff
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6') == '1;1;1'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' n=2) == ';;'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=0) == '2,2;2,2'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=1) == '1;1;1'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=0 prepend='1,2') == '0,0;2,2;2,2'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=0 append='1,2') == '2,2;2,2;-4,-4'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=0 prepend='1,2' append='1,2') == '0,0;2,2;2,2;-4,-4'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=1 prepend='1;2;3') == '0,1;1,1;2,1'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=1 append='1;2;3') == '1,-1;1,-2;1,-3'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=1 prepend='1;2;3' append='1;2;3') == '0,1,-1;1,1,-2;2,1,-3'
#assert $(gridlabd matrix -f diff '1,2;3,4;5,6' axis=1 prepend='1;2;3' append='1;2;3' n=3) == '-3;-3;-3'

// divide
#assert $(gridlabd matrix -f divide '1,2;3,4;5,6' '1,2;3,4;5,6') == '1,1;1,1;1,1'

// divmod
#assert $(gridlabd matrix -f divmod '1,2;3,4;5,6' '1,2;3,4;5,6' | tr '\n' ';') == '1,1;1,1;1,1;0,0;0,0;0,0;'
#assert $(gridlabd matrix -f divmod '1,2;3,4;5,6' '1,2;3,4;5,5' | tr '\n' ';') == '1,1;1,1;1,1;0,0;0,0;0,1;'

// dot
#assert $(gridlabd matrix -f dot '1,2;3,4;5,6' '1,2,3;4,5,6') == '9,12,15;19,26,33;29,40,51'
#assert $(gridlabd matrix -f dot '1,2,3;4,5,6' '1,2;3,4;5,6') == '22,28;49,64'

// exp
#assert $(gridlabd matrix -f exp '1,2,3;4,5,6') == '2.7182818,7.3890561,20.085537;54.59815,148.41316,403.42879'

// exp2
#assert $(gridlabd matrix -f exp2 '1,2,3;4,5,6') == '2,4,8;16,32,64'

// expm1
#assert $(gridlabd matrix -f expm1 '1,2,3;4,5,6') == '1.7182818,6.3890561,19.085537;53.59815,147.41316,402.42879'

// eye
#assert $(gridlabd matrix -f eye 5) == '1,0,0,0,0;0,1,0,0,0;0,0,1,0,0;0,0,0,1,0;0,0,0,0,1'
#assert $(gridlabd matrix -f eye 5 k=-1) == '0,0,0,0,0;1,0,0,0,0;0,1,0,0,0;0,0,1,0,0;0,0,0,1,0'

// fabs
#assert $(gridlabd matrix -f fabs '1,2;-3,4;-5,-6') == '1,2;3,4;5,6'

// fix
#assert $(gridlabd matrix -f fix '1.1,2.2;-3.3,4.4;-5.5,-6.6') == '1,2;-3,4;-5,-6'

// float_power
#assert $(gridlabd matrix -f float_power '1.1,2.2;3.3,4.4;5.5,6.6' '1.1,2.2;-3.3,4.4;-5.5,-6.6') == '1.1105342,5.6666958;0.019449301,677.94081;8.4723757e-05,3.8995099e-06'

// floor
#assert $(gridlabd matrix -f floor '1.1,2.2;-3.3,4.4;-5.5,-6.6') == '1,2;-4,4;-6,-7'

// floor_divide
#assert $(gridlabd matrix -f floor_divide '1.1,2.2;3.3,4.4;5.5,6.6' '1.1,2.2;-3.3,4.4;-5.5,-6.6') == '1,1;-1,1;-1,-1'

// fmax
#assert $(gridlabd matrix -f fmax '1.1,2.2;-3.3,4.4;-5.5,-6.6' '2,2;3,3;4,4') == '2,2.2;3,4.4;4,4'

// fmin
#assert $(gridlabd matrix -f fmin '1.1,2.2;-3.3,4.4;-5.5,-6.6' '2,2;3,3;4,4') == '1.1,2;-3.3,3;-5.5,-6.6'

// fmod
#assert $(gridlabd matrix -f fmod '1.1,2.2;-3.3,4.4;-5.5,-6.6' '2,2;3,3;4,4' | tr '\n' ';') == '1.1,0.2;-0.3,1.4;-1.5,-2.6;'

// gcd
#assert $(gridlabd matrix -f gcd '1,2;3,4;5,6' '2,2;2,2;2,2') == '1,2;1,2;1,2'

// gradient
#assert $(gridlabd matrix -f gradient '1,2,4,7,11,16;2,3,6,7,12,15' axis=0) == '1,1,2,0,1,-1;1,1,2,0,1,-1'
#assert $(gridlabd matrix -f gradient '1,2,4,7,11,16;2,3,6,7,12,15' axis=1) == '1,1.5,2.5,3.5,4.5,5;1,2,2,3,4,3'
#assert $(gridlabd matrix -f gradient '1,2,4,7,11,16;2,3,6,7,12,15' axis=1 edge_order=2) == '0.5,1.5,2.5,3.5,4.5,5.5;0,2,2,3,4,2'

// heaviside
#assert $(gridlabd matrix -f heaviside '-1,0,1;0,-1,1;0,1,-1' 0.5) == '0,0.5,1;0.5,0,1;0.5,1,0'
#assert $(gridlabd matrix -f heaviside '-1,0,1;0,-1,1;0,1,-1' '-1,0,1;0,-1,1;0,1,-1') == '0,0,1;0,0,1;0,1,0'

// hypot
#assert $(gridlabd matrix -f hypot '3,4;4,3' '4,3;3,4') == '5,5;5,5'

// i0
#assert $(gridlabd matrix -f i0 '0,1;2,3') == '1,1.2660659,2.2795853,4.8807926'
#assert $(gridlabd matrix -f i0 '0.0,1.0;2.0,3.0') == '1,1.2660659,2.2795853,4.8807926'

// identity
#assert $(gridlabd matrix -f identity 3) == '1,0,0;0,1,0;0,0,1'

// imag
#assert $(gridlabd matrix -f imag '1+0j,2+1j;3+2j,3+3j') == '0,1;2,3'

// interp
#assert $(gridlabd matrix -f interp 2.5 1,2,3 3,2,0) == '1'
#assert $(gridlabd matrix -f interp 0,1,1.5,2.72,3.14 1,2,3 3,2,0) == '3,3,2.5,0.56,0'
#assert $(gridlabd matrix -f interp 3.5 1,2,3 3,2,0 right=inf) == 'inf'
#assert $(gridlabd matrix -f interp -3.5 1,2,3 3,2,0 left=-inf) == '-inf'
#assert $(gridlabd matrix -f interp 3.5 1,2,3 3,2,0 left=nan right=nan) == 'nan'

// lcm
#assert $(gridlabd matrix -f lcm 12,15 20,30) == '60,30'

// ldexp
#assert $(gridlabd matrix -f ldexp 5 1,2,3,4) == '10,20,40,80'

// log
#assert $(gridlabd matrix -f log 1,2,3,4) == '0,0.69314718,1.0986123,1.3862944'

// log10
#assert $(gridlabd matrix -f log10 1,2,3,4) == '0,0.30103,0.47712125,0.60205999'

// log1p
#assert $(gridlabd matrix -f log1p 1,2,3,4) == '0.69314718,1.0986123,1.3862944,1.6094379'

// log2
#assert $(gridlabd matrix -f log2 1,2,3,4) == '0,1,1.5849625,2'

// logaddexp
#assert $(gridlabd matrix -f logaddexp -115.12925 -114.21296) == '-113.87649'

// logaddexp2
#assert $(gridlabd matrix -f logaddexp2 -115.12925 -114.21296) == '-113.59955'

// maximum
#assert $(gridlabd matrix -f maximum 2,3,4 1,5,2) == '2,5,4'
#assert $(gridlabd matrix -f maximum 2,3,4 5) == '5,5,5'

// minimum
#assert $(gridlabd matrix -f minimum 2,3,4 1,5,2) == '1,3,2'
#assert $(gridlabd matrix -f minimum 2,3,4 5) == '2,3,4'

// mod
#assert $(gridlabd matrix -f mod 1,2,3 2,2,2) == '1,0,1'

// modf
#assert $(gridlabd matrix -f modf 1.2,3.4 | tr '\n' ';') == '0.2,0.4;1,3;'

// multiply
#assert $(gridlabd matrix -f multiply '1,2;3,4' 2) == '2,4;6,8'
#assert $(gridlabd matrix -f multiply '1,2;3,4' '1,2;3,4') == '1,4;9,16'

// nancumprod
#assert $(gridlabd matrix -f nancumprod "1,;3,4;5,6") == '1,1,3,12,60,360'
#assert $(gridlabd matrix -f nancumprod "1,;3,4;5,6" axis=0) == '1,1;3,4;15,24'
#assert $(gridlabd matrix -f nancumprod "1,;3,4;5,6" axis=1) == '1,1;3,12;5,30'

// nancumsum
#assert $(gridlabd matrix -f nancumsum "1,;3,4;5,6") == '1,1,4,8,13,19'
#assert $(gridlabd matrix -f nancumsum "1,;3,4;5,6" axis=0) == '1,0;4,4;9,10'
#assert $(gridlabd matrix -f nancumsum "1,;3,4;5,6" axis=1) == '1,1;3,7;5,11'

// nanprod
#assert $(gridlabd matrix -f nanprod "1,;3,4;5,6") == '360'
#assert $(gridlabd matrix -f nanprod "1,;3,4;5,6" axis=0) == '15,24'
#assert $(gridlabd matrix -f nanprod "1,;3,4;5,6" axis=1) == '1;12;30'
#assert $(gridlabd matrix -f nanprod "1,;3,4;5,6" axis=0,1) == '360'
#assert $(gridlabd matrix -f nanprod "1,;3,4;5,6" axis=1,0) == '360'

// nansum
#assert $(gridlabd matrix -f nansum "1,;3,4;5,6") == '19'
#assert $(gridlabd matrix -f nansum "1,;3,4;5,6" axis=0) == '9,10'
#assert $(gridlabd matrix -f nansum "1,;3,4;5,6" axis=1) == '1;7;11'
#assert $(gridlabd matrix -f nansum "1,;3,4;5,6" axis=0,1) == '19'
#assert $(gridlabd matrix -f nansum "1,;3,4;5,6" axis=1,0) == '19'

// negative
#assert $(gridlabd matrix -f negative "1,;3,4;5,6") == '-1,nan;-3,-4;-5,-6'

// nextafter
#assert $(gridlabd matrix -f nextafter "1e-500,;3,4;5,6" 1) == '4.9406565e-324,nan;3,4;5,6'
#assert $(gridlabd matrix -f nextafter "1e-500,;3,4;5,6" 0) == '0,nan;3,4;5,6'

// ones
#assert $(gridlabd matrix -f ones 2,3) == '1,1,1;1,1,1'

// positive
#assert $(gridlabd matrix -f positive '-1,nan;-3,-4;-5,-6') == '-1,nan;-3,-4;-5,-6'

// power
#assert $(gridlabd matrix -f power "-1,nan;inf,-inf;-5,-6;" 2) == '1,nan;inf,inf;25,36'
#assert $(gridlabd matrix -f power "-1,nan;inf,-inf;-5,-6;" "-1,nan;inf,-inf;-5,-6;") == '-1,nan;inf,0;-0.00032,2.1433471e-05'

// prod
#assert $(gridlabd matrix -f prod "1,2;3,4;5,6") == '720'
#assert $(gridlabd matrix -f prod "1,2;3,4;5,6" axis=0) == '15,48'
#assert $(gridlabd matrix -f prod "1,2;3,4;5,6" axis=1) == '2;12;30'
#assert $(gridlabd matrix -f prod "1,2;3,4;5,6" axis=0,1) == '720'
#assert $(gridlabd matrix -f prod "1,2;3,4;5,6" axis=1,0) == '720'

// rad2deg
#assert $(gridlabd matrix -f rad2deg "1,2;3,4;5,6") == '57.29578,114.59156;171.88734,229.18312;286.4789,343.77468'

// radians
#assert $(gridlabd matrix -f radians "1,2;3,4;5,6") == '0.017453293,0.034906585;0.052359878,0.06981317;0.087266463,0.10471976'

// arange
#assert $(gridlabd matrix -f arange 1 stop=4) == '1,2,3'
#assert $(gridlabd matrix -f arange 1 stop=4 step=2) == '1,3'
#assert -z $(gridlabd matrix -f arange 1 stop=4 step=-2)
#assert $(gridlabd matrix -f arange 4 stop=1 step=-2) == '4,2'
#assert $(gridlabd matrix -f arange 4 stop=1 step=-1.2) == '4,2.8,1.6'

// real
#assert $(gridlabd matrix -f real '1+0j,2+1j;3+2j,4+3j') == '1,2;3,4'

// real_if_close
#assert $(gridlabd matrix -f real_if_close '1+0j,2+1j;3+2j,4+3j' tol=1e20) == '1,2;3,4'

// reciprocal
#assert $(gridlabd matrix -f reciprocal '1,2,3' dtype=int) == '1,0,0'
#assert $(gridlabd matrix -f reciprocal '1,2,3' dtype=float) == '1,0.5,0.33333333'
#assert $(gridlabd matrix -f reciprocal '1,2,3' dtype=complex) == '1-0j,0.5-0j,0.33333333-0j'

// remainder
#assert $(gridlabd matrix -f remainder "1,2;3,4;5,6" 3) == '1,2;0,1;2,0'
#assert $(gridlabd matrix -f remainder "1,2;3,4;5,6" "2,3;2,3;2,3") == '1,2;1,1;1,0'

// rint
#assert $(gridlabd matrix -f rint "1.2,3.4,5.6") == '1,3,6'

// round_
#assert $(gridlabd matrix -f round_ "1.2,3.4,5.6") == '1,3,6'

// sign
#assert $(gridlabd matrix -f sign "1,-2;3,-4;5,-6;") == '1,-1;1,-1;1,-1'

// signbit
#assert $(gridlabd matrix -f signbit "1,-2;3,-4;5,-6;") == '0,1;0,1;0,1'

// sin
#assert $(gridlabd matrix -f sin "1,-2;3,-4;5,-6;") == '0.84147098,-0.90929743;0.14112001,0.7568025;-0.95892427,0.2794155'

// sinc
#assert $(gridlabd matrix -f sinc "1,-2;3,-4;5,-6;") == '3.8981718e-17,-3.8981718e-17;3.8981718e-17,-3.8981718e-17;3.8981718e-17,-3.8981718e-17'

// sinh
#assert $(gridlabd matrix -f sinh "1,-2;3,-4;5,-6;") == '1.1752012,-3.6268604;10.017875,-27.289917;74.203211,-201.71316'

// spacing
#assert $(gridlabd matrix -f spacing "1,-2;3,-4;5,-6;") == '2.220446e-16,-4.4408921e-16;4.4408921e-16,-8.8817842e-16;8.8817842e-16,-8.8817842e-16'

// sqrt
#assert $(gridlabd matrix -f sqrt "1,2;3,4;5,6;") == '1,1.4142136;1.7320508,2;2.236068,2.4494897'

// square
#assert $(gridlabd matrix -f square "1,2;3,4;5,6;") == '1,4;9,16;25,36'

// subtract
#assert $(gridlabd matrix -f subtract "1,2;3,4;5,6;" 2) == '-1,0;1,2;3,4'
#assert $(gridlabd matrix -f subtract "1,2;3,4;5,6;" "-1,0;1,2;3,4;") == '2,2;2,2;2,2'

// sum
#assert $(gridlabd matrix -f sum "1,2;3,4;5,6;") == '21'
#assert $(gridlabd matrix -f sum "1,2;3,4;5,6;" axis=0) == '9,12'
#assert $(gridlabd matrix -f sum "1,2;3,4;5,6;" axis=1) == '3;7;11'
#assert $(gridlabd matrix -f sum "1,2;3,4;5,6;" axis=0,1) == '21'
#assert $(gridlabd matrix -f sum "1,2;3,4;5,6;" axis=1,0) == '21'

// tan
#assert $(gridlabd matrix -f tan "1,2;3,4;5,6;") == '1.5574077,-2.1850399;-0.14254654,1.1578213;-3.380515,-0.29100619'

// tanh
#assert $(gridlabd matrix -f tanh "1,2;3,4;5,6;") == '0.76159416,0.96402758;0.99505475,0.9993293;0.9999092,0.99998771'

// trace
#assert $(gridlabd matrix -f trace "1,2;3,4;5,6;") == '5'

// transpose
#assert $(gridlabd matrix -f transpose "1,2;3,4;5,6;") == '1,3,5;2,4,6'
#assert $(gridlabd matrix -f -t transpose "1,2;3,4;5,6;") == '1,2;3,4;5,6'

// trapz
#assert $(gridlabd matrix -f trapz "1,2,3") == '4'
#assert $(gridlabd matrix -f trapz "1,2,3" x="4,6,8") == '8'
#assert $(gridlabd matrix -f trapz "1,2,3" dx=3) == '12'

// true_divide
#assert $(gridlabd matrix -f true_divide "1,2,3,4,5" 4) == '0.25,0.5,0.75,1,1.25'
#assert $(gridlabd matrix -f true_divide "1,2,3,4,5" "5,4,3,2,1") == '0.2,0.5,1,2,5'

// trunc
#assert $(gridlabd matrix -f trunc "0.25;0.5;0.75;1;1.25;") == '0;0;0;1;1'

// unwrap
#assert $(gridlabd matrix -f unwrap "1,2,3,4,5" period=1.5) == '1,0.5,0,-0.5,-1'
#assert $(gridlabd matrix -f unwrap "1,2,3,4,5" period=1.5 discont=3) == '1,2,3,4,5'

// zeros
#assert $(gridlabd matrix -f zeros 2,3) == '0,0,0;0,0,0'

