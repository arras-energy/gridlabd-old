#assert $(gridlabd matrix version) == '1.21.4'

// matrix.all <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;") == '1'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;" axis=0) == '1,1,1'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;" axis=1) == '1;1'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;") == '0'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;" axis=0) == '1,0,1'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;" axis=1) == '1;0'

// matrix.any <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0") == '1'
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0" axis=0) == '1,0,0'
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0" axis=1) == '1;0'

// matrix.argmax <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4") == '3'
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4" axis=0) == '1,1'
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4" axis=1) == '1;1'

// matrix.argmin <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4") == '0'
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4" axis=0) == '0,0'
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4" axis=1) == '0;0'

// matrix.argpartition <matrix> axis=<int> kind=<str> order=<intlist>
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0) == '0,1;0,1'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 axis=0) == '0,0;1,1'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 axis=1) == '0,1;0,1'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 1) == '0,1;0,1'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 kind=introselect) == '0,1;0,1'

// matrix.argsort <matrix> axis=<int> kind=<str> order=<intlist>
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;") == '1,0,2;2,1,0;2,1,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" axis=0) == '0,1,1;1,0,2;2,2,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" axis=1) == '1,0,2;2,1,0;2,1,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=quicksort) == '1,0,2;2,1,0;2,1,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=mergesort) == '1,0,2;2,1,0;2,1,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=heapsort) == '1,0,2;2,1,0;2,1,0'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=stable) == '1,0,2;2,1,0;2,1,0'

// matrix.astype <matrix> order=<str> casting=<str> subok=<boolstr>
#assert $(gridlabd matrix -f matrix.astype "1,2,3;4,5,6" complex) == '1+0j,2+0j,3+0j;4+0j,5+0j,6+0j'
#assert $(gridlabd matrix -f matrix.astype "1.2,3.4,5.6;" int) == '1,3,5'

// matrix.byteswap <matrix>
#assert $(gridlabd matrix -f matrix.byteswap "1.2,3.4,5.6;") == '4.6672615e-62,4.6672615e-62,1.9035986e+185'

// matrix.choose <matrix> <intlist> mode=<str>
#assert $(gridlabd matrix -f matrix.choose "1" 1,2,3,4) == '2'
#assert $(gridlabd matrix -f matrix.choose "1" 1,2,3,4 mode=raise) == '2'
#assert $(gridlabd matrix -f matrix.choose "6" 1,2,3,4 mode=wrap) == '3'
#assert $(gridlabd matrix -f matrix.choose "6" 1,2,3,4 mode=clip) == '4'

// matrix.clip <matrix> min=<float> max=<float> [where=<boollist>] [axes=<tuplelist>] [axis=<inttuple>] [keepdims=<boolstr>] [casting=<str>] [order=<str>] [dtype=<str>] [subok=<boolstr>]
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" min=2) == '2,2,3,4;5,6,7,8'
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" max=7) == '1,2,3,4;5,6,7,7'
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" min=2 max=7) == '2,2,3,4;5,6,7,7'

// matrix.compress <matrix> axis=<int>
// TODO: ERROR [gridlabd-matrix]: 'matrix.compress 0,1 1,2;3,4;5,6 axis=0' failed - descriptor 'compress' for 'numpy.ndarray' objects doesn't apply to a 'list' object
//#assert $(gridlabd matrix -f matrix.compress "0,1" "1,2;3,4;5,6" axis=0) == '3,4'

// matrix.conj <matrix>
#assert $(gridlabd matrix -f matrix.conj "0+1j,1-2j") == '0-1j,1+2j'

// matrix.conjugate <matrix>
#assert $(gridlabd matrix -f matrix.conjugate "0+1j,1-2j") == '0-1j,1+2j'

// matrix.cumprod <matrix>
#assert $(gridlabd matrix -f matrix.cumprod "0+1j,1-2j") == '0+1j,2+1j'

// matrix.cumsum <matrix>
#assert $(gridlabd matrix -f matrix.cumsum "0+1j,2+1j;") == '0+1j,2+2j'

// matrix.diagonal <matrix>
#assert $(gridlabd matrix -f matrix.diagonal "1,2;3,4") == '1,4'

// matrix.dot <matrix>
#assert $(gridlabd matrix -f matrix.dot "1,2;3,4" "1,2;3,4") == '7,10;15,22'

// matrix.fill <matrix>
#assert $(gridlabd matrix -f matrix.fill "1,2;3,4" 5) == '5,5;5,5'
#assert $(gridlabd matrix -f matrix.fill "1,2;3,4+0j" 5) == '5+0j,5+0j;5+0j,5+0j'

// matrix.flatten <matrix>
#assert $(gridlabd matrix -f matrix.flatten "1,2;3,4") == '1,2,3,4'

// matrix.getH <matrix>
#assert $(gridlabd matrix -f matrix.getH "0+1j,2+3j;4+5j,6+7j") == '0-1j,4-5j;2-3j,6-7j'

// matrix.getI <matrix>
#assert $(gridlabd matrix -f matrix.getI "1,2;3,4") == '-2,1;1.5,-0.5'

// matrix.getT <matrix>
#assert $(gridlabd matrix -f matrix.getT "1,2;3,4") == '1,3;2,4'

// matrix.getfield <matrix> <dtype>
#assert $(gridlabd matrix -f matrix.getfield "0+1j,2+3j;4+5j,6+7j" float) == '0,2;4,6'
#assert $(gridlabd matrix -f matrix.getfield "0+1j,2+3j;4+5j,6+7j" float offset=8) == '1,3;5,7'

// matrix.item <matrix>
#assert $(gridlabd matrix -f matrix.item "0+1j,2+3j;4+5j,6+7j" 2) == '4+5j'
#assert $(gridlabd matrix -f matrix.item "0+1j,2+3j;4+5j,6+7j" 1,1) == '6+7j'

// matrix.itemset <matrix>
#assert $(gridlabd matrix -f matrix.itemset "0+1j,2+3j;4+5j,6+7j" 1,1 1.23) == '0+1j,2+3j;4+5j,1.23+0j'

// matrix.max <matrix>
#assert $(gridlabd matrix -f matrix.max "0+1j,2+3j;4+5j,6+7j;") == '6+7j'
#assert $(gridlabd matrix -f matrix.max "0+1j,2+3j;4+5j,6+7j;" axis=0) == '4+5j,6+7j'
#assert $(gridlabd matrix -f matrix.max "0+1j,2+3j;4+5j,6+7j;" axis=1) == '2+3j;6+7j'

// matrix.mean <matrix>
#assert $(gridlabd matrix -f matrix.mean "0+1j,2+3j;4+5j,6+7j;") == '3+4j'
#assert $(gridlabd matrix -f matrix.mean "0+1j,2+3j;4+5j,6+7j;" axis=0) == '2+3j,4+5j'
#assert $(gridlabd matrix -f matrix.mean "0+1j,2+3j;4+5j,6+7j;" axis=1) == '1+2j;5+6j'

// matrix.min <matrix>
#assert $(gridlabd matrix -f matrix.min "0+1j,2+3j;4+5j,6+7j;") == '0+1j'
#assert $(gridlabd matrix -f matrix.min "0+1j,2+3j;4+5j,6+7j;" axis=0) == '0+1j,2+3j'
#assert $(gridlabd matrix -f matrix.min "0+1j,2+3j;4+5j,6+7j;" axis=1) == '0+1j;4+5j'

// matrix.nonzero <matrix>
#assert $(gridlabd matrix -f matrix.nonzero "0,1;2,3" | tr '\n' ';') == '0,1,1;1,0,1;'

// matrix.partition <matrix>
#assert $(gridlabd matrix -f matrix.partition "4,3,2,1,0;5,4,3,2,1;" 3) == '1,0,2,3,4;2,1,3,4,5'
#assert $(gridlabd matrix -f matrix.partition "4,3,2,1,0;5,4,3,2,1;" 3 axis=1) == '1,0,2,3,4;2,1,3,4,5'
#assert $(gridlabd matrix -f matrix.partition "4,3,2,1,0;5,4,3,2,1;" 1 axis=0) == '4,3,2,1,0;5,4,3,2,1'

// matrix.prod <matrix> axis=<int> dtype=<str> keepdims=<bool>
#assert $(gridlabd matrix -f matrix.prod "1,2;3,4;") == '24'
#assert $(gridlabd matrix -f matrix.prod "1,2;3,4;" dtype=complex) == '24+0j'
#assert $(gridlabd matrix -f matrix.prod "1,2;3,4;" axis=0) == '3,8'
#assert $(gridlabd matrix -f matrix.prod "1,2;3,4;" axis=1) == '2;12'

// matrix.ptp <matrix>
#assert $(gridlabd matrix -f matrix.ptp "1,2;3,4;") == '3'
#assert $(gridlabd matrix -f matrix.ptp "1,2;3,4;" axis=0) == '2,2'
#assert $(gridlabd matrix -f matrix.ptp "1,2;3,4;" axis=1) == '1;1'

// matrix.put <matrix>
#assert $(gridlabd matrix -f matrix.put "1,2;3,4" 1 0) == '1,0;3,4'
#assert $(gridlabd matrix -f matrix.put "1,2;3,4" 6 0 mode=wrap) == '1,2;0,4'
#assert $(gridlabd matrix -f matrix.put "1,2;3,4" 6 0 mode=clip) == '1,2;3,0'

// matrix.ravel <matrix>
#assert $(gridlabd matrix -f matrix.ravel "1,2;3,4") == '1,2,3,4'
#assert $(gridlabd matrix -f matrix.ravel "1,2;3,4" order=C) == '1,2,3,4'
#assert $(gridlabd matrix -f matrix.ravel "1,2;3,4" order=F) == '1,3,2,4'
#assert $(gridlabd matrix -f matrix.ravel "1,2;3,4" order=A) == '1,2,3,4'
#assert $(gridlabd matrix -f matrix.ravel "1,2;3,4" order=K) == '1,2,3,4'

// matrix.repeat <matrix> <repeats> axis=<inttuple>
#assert $(gridlabd matrix -f matrix.repeat "1,2;3,4" 2) == '1,1,2,2,3,3,4,4'
#assert $(gridlabd matrix -f matrix.repeat "1,2;3,4" 2,3 axis=0) == '1,2;1,2;3,4;3,4;3,4'
#assert $(gridlabd matrix -f matrix.repeat "1,2;3,4" 2,3 axis=1) == '1,1,2,2,2;3,3,4,4,4'

// matrix.reshape <matrix>
#assert $(gridlabd matrix -f matrix.reshape "1,2;3,4" 1,4) == '1,2,3,4'
#assert $(gridlabd matrix -f matrix.reshape "1,2;3,4" 4,1) == '1;2;3;4'
#assert $(gridlabd matrix -f matrix.reshape "1,2;3,4" 4,1 order=F) == '1;3;2;4'

// matrix.resize <matrix>
// TODO: ValueError: cannot resize this array: it does not own its data
//#assert $(gridlabd matrix -f matrix.resize "1,2;3,4" 2,2) == '1,2;3,4'

// matrix.round <matrix>
#assert $(gridlabd matrix -f matrix.round "1.2,3.4;5.6,7.8") == '1,3;6,8'
#assert $(gridlabd matrix -f matrix.round "1.2,3.4;5.6,7.8" decimals=0) == '1,3;6,8'
#assert $(gridlabd matrix -f matrix.round "1.2,3.4;5.6,7.8" decimals=1) == '1.2,3.4;5.6,7.8'
#assert $(gridlabd matrix -f matrix.round "1.2,3.4;5.6,7.8" decimals=2) == '1.2,3.4;5.6,7.8'
#assert $(gridlabd matrix -f matrix.round "1.2,3.4;5.6,7.8" decimals=-1) == '0,0;10,10'

// matrix.searchsorted <matrix> <matrix> side=<str> sorter=<intlist>
// TODO: ValueError: object too deep for desired array
//#assert $(gridlabd matrix -f matrix.searchsorted "1,2,3,4,5" 3) == '2'
//#assert $(gridlabd matrix -f matrix.searchsorted "1,2,3,4,5" 3 side=right) == '3'
//#assert $(gridlabd matrix -f matrix.searchsorted "1,2,3,4,5" -10,10,2,3) == '0,5,1,2'

// matrix.setfield <matrix>
#assert $(gridlabd matrix -f matrix.setfield "1,2;3,4" 5 int32) == '5,5;5,5'
#assert $(gridlabd matrix -f matrix.setfield "1,2;3,4" 5 int32 offset=0) == '5,5;5,5'
#assert $(gridlabd matrix -f matrix.setfield "1,2;3,4" 5 int32 offset=1) == '1281,1282;1283,1284'

// matrix.sort <matrix>
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2") == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" axis=0) == '1,2;4,3'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" axis=1) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" kind=quicksort) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" kind=mergesort) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" kind=heapsort) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.sort "1,3;4,2" kind=stable) == '1,3;2,4'

// matrix.squeeze <matrix>
#assert $(gridlabd matrix -f matrix.squeeze "1,2;3,4") == '1,2;3,4'
#assert $(gridlabd matrix -f matrix.squeeze "1,2,3,4" axis=0) == '1,2,3,4'
#assert $(gridlabd matrix -f matrix.squeeze "1;2;3;4" axis=1) == '1,2,3,4'

// matrix.std <matrix> axis=<int> dtype=<str> ddof=<int>
#assert $(gridlabd matrix -f matrix.std "1,2;3,4") == '1.118034'
#assert $(gridlabd matrix -f matrix.std "1,2;3,4" ddof=0) == '1.118034'
#assert $(gridlabd matrix -f matrix.std "1,2;3,4" ddof=1) == '1.2909944'
#assert $(gridlabd matrix -f matrix.std "1,2;3,4" ddof=2) == '1.5811388'
#assert $(gridlabd matrix -f matrix.std "1,2;3,4" dtype=complex) == '1.118034+0j'

// matrix.sum <matrix>
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4") == '10'
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4" axis=0) == '4,6'
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4" axis=1) == '3;7'
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4" axis=0,1) == '10'
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4" axis=1,0) == '10'
#assert $(gridlabd matrix -f matrix.sum "1,2;3,4" dtype=complex) == '10+0j'

// matrix.swapaxes <matrix> <int> <int>
#assert $(gridlabd matrix -f matrix.swapaxes "1,2;3,4" 0 1) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.swapaxes "1,2;3,4" 1 0) == '1,3;2,4'
#assert $(gridlabd matrix -f matrix.swapaxes "1,2;3,4" 0 0) == '1,2;3,4'
#assert $(gridlabd matrix -f matrix.swapaxes "1,2;3,4" 1 1) == '1,2;3,4'

// matrix.take <matrix>
#assert $(gridlabd matrix -f matrix.take "1,2;3,4" "3,2,1,0") == '4,3,2,1'
#assert $(gridlabd matrix -f matrix.take "1,2;3,4" "0,0,1,1" axis=0) == '1,2;1,2;3,4;3,4'
#assert $(gridlabd matrix -f matrix.take "1,2;3,4" "0,0,1,1" axis=1) == '1,1,2,2;3,3,4,4'
#assert $(gridlabd matrix -f matrix.take "1,2;3,4" "4,3,2,1" axis=1 mode=clip) == '2,2,2,2;4,4,4,4'
#assert $(gridlabd matrix -f matrix.take "1,2;3,4" "0,0,1,1" axis=1 mode=wrap) == '1,1,2,2;3,3,4,4'

// matrix.trace <matrix> offset=<int> axis1=<int> axis2=<int> dtype=<str>
#assert $(gridlabd matrix -f matrix.trace "1,2;3,4") == '5'
#assert $(gridlabd matrix -f matrix.trace "1,2;3,4" offset=1) == '2'
#assert $(gridlabd matrix -f matrix.trace "1,2;3,4" offset=-1) == '3'
#assert $(gridlabd matrix -f matrix.trace "1,2;3,5" axis1=0 axis2=1) == '6'
#assert $(gridlabd matrix -f matrix.trace "1,2;3,5" axis1=1 axis2=0) == '6'
#assert $(gridlabd matrix -f matrix.trace "1,2;3,4" dtype=complex) == '5+0j'

// matrix.transpose <matrix>
#assert $(gridlabd matrix -f matrix.transpose "1,2;3,4") == '1,3;2,4'

// matrix.var <matrix> axis=<inttuple> dtype=<str> ddof=<int>
#assert $(gridlabd matrix -f matrix.var "1,2;3,4") == '1.25'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" axis=0) == '1,1'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" axis=1) == '0.25;0.25'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" ddof=0) == '1.25'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" ddof=1) == '1.6666667'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" ddof=2) == '2.5'
#assert $(gridlabd matrix -f matrix.var "1,2;3,4" dtype=complex) == '1.25+0j'

