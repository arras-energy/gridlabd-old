#!/usr/local/bin/python3

import sys
import json

def error(code,msg):
    print("ERROR %d: %s" % (code,msg), file=sys.stderr);
    quit(code);

def output_json(data):
    if type(data) is dict or type(data) is list :
        print(json.dumps(data,indent=4))
    else:
        print(data)

def output_raw(data):
    print(data)

def output_csv(data):
    if type(data) is dict:
        for key,value in data.items():
            print(f"{key},{value}")
    elif type(data) is list:
        print("\n".join(list))
    else:
        print(data)

output_format=output_json

if len(sys.argv) > 1 and sys.argv[1] in ['-h','--help','help'] :
    print("Syntax: gridlabd json-get [keys ...] [-k|--keys] [-j|--json|-r|--raw|-r|--csv]");
    quit(0);
try:
    data = json.load(sys.stdin);
    if len(sys.argv) > 1 :
        for item in sys.argv[1::] :
            if item in ['-k','--keys'] :
                data = list(data.keys());
                break;
            elif item in ['-r','--raw']:
                output_format = output_raw
            elif item in ['-j','--json']:
                output_format = output_json
            elif item in ['-c','--csv']:
                output_format = output_csv
            elif type(data) is dict and item in data.keys() :
                data = data[item];
            elif type(data) is list and int(item) >=0 and int(item) <= len(data) :
                data = data[int(item)];
            else :
                error(2,"%s is not valid"%item);
    output_format(data)
except:
    error(1,"%s %s" % (sys.exc_info()[0],sys.exc_info()[1]));
