#!/bin/bash

# check environment
if [ ${GLD_ETC:-none} == none ]; then
    export GLD_ETC=${gridlabd --version=install}/shared/gridlabd
fi

# configurable parameters
GITHUB="https://github.com"
GITHUBUSERCONTENT="https://raw.githubusercontent.com"
if [ "${ORGANIZATION}" == "" ]; then
    export ORGANIZATION="US/CA/SLAC"
fi
GITUSER=slacgismo
GITREPO="gridlabd-template"
GITBRANCH="master"
DATADIR="$GLD_ETC/template/$ORGANIZATION"
OPENURLCMD='open ${file}'
FORMAT="default"

# load the configuration (if any)
CONFIGFILE="$GLD_ETC/gridlabd-template.conf"
if [ -f $CONFIGFILE ]; then
    source $CONFIGFILE
fi

# options
EXECNAME="$(basename $0)"
QUIET="no"
VERBOSE="no"
DEBUG="no"

function error()
{
    RC=$1
    shift
    if [ "$QUIET" != "very" ]; then
        echo "ERROR [$EXECNAME]: $*" >/dev/stderr
    fi
    exit $RC
}

function warning()
{
    if [ "$QUIET" == "no" ]; then
        echo "WARNING [$EXECNAME]: $*" >/dev/stderr
    fi
}

function verbose()
{
    if [ "$VERBOSE" == "yes" ]; then
        echo "VERBOSE [$EXECNAME]: $*" >/dev/stderr
    fi
}

function debug()
{
    if [ "$DEBUG" == "yes" ]; then
        echo "DEBUG [$EXECNAME]: $*" >/dev/stderr
    fi
}

function config()
{
    if [ $# -eq 0 -o "$1" == "show" ]; then
        if [ "$FORMAT" == "json" ]; then
            debug "showing config in json format"
            echo "{"
            echo "    \"GITHUB\" : \"$GITHUB\","
            echo "    \"GITHUBUSERCONTENT\" : \"$GITHUBUSERCONTENT\","
            echo "    \"ORGANIZATION\" : \"$ORGANIZATION\","
            echo "    \"GITUSER\" : \"$GITUSER\","
            echo "    \"GITREPO\" : \"$GITREPO\","
            echo "    \"GITBRANCH\" : \"$GITBRANCH\","
            echo "    \"CACHEDIR\" : \"$CACHEDIR\","
            echo "    \"DATADIR\" : \"$DATADIR\","
            echo "}"
        elif [ "$FORMAT" == "glm" ]; then
            debug "showing config in glm format"
            echo "#define TEMPLATE_GITHUB=$GITHUB"
            echo "#define TEMPLATE_GITHUBUSERCONTENT=$GITHUBUSERCONTENT"
            echo "#define TEMPLATE_ORGANIZATION=$ORGANIZATION"
            echo "#define TEMPLATE_GITUSER=$GITUSER"
            echo "#define TEMPLATE_GITREPO=$GITREPO"
            echo "#define TEMPLATE_GITBRANCH=$GITBRANCH"
            echo "#define TEMPLATE_CACHEDIR=$CACHEDIR"
            echo "#define TEMPLATE_DATADIR=$DATADIR"
        elif [ "$FORMAT" == "csv" ]; then
            debug "showing config in csv format"
            echo "name,value"
            echo "GITHUB,\"$GITHUB\""
            echo "GITHUBUSERCONTENT,\"$GITHUBUSERCONTENT\""
            echo "ORGANIZATION,\"$ORGANIZATION\""
            echo "GITUSER,\"$GITUSER\""
            echo "GITREPO,\"$GITREPO\""
            echo "GITBRANCH,\"$GITBRANCH\""
            echo "CACHEDIR,\"$CACHEDIR\""
            echo "DATADIR,\"$DATADIR\""
        else
            debug "showing config in raw format"
            echo "GITHUB=\"$GITHUB\""
            echo "GITHUBUSERCONTENT=\"$GITHUBUSERCONTENT\""
            echo "ORGANIZATION=\"$ORGANIZATION\""
            echo "GITUSER=\"$GITUSER\""
            echo "GITREPO=\"$GITREPO\""
            echo "GITBRANCH=\"$GITBRANCH\""
            echo "CACHEDIR=\"$CACHEDIR\""
            echo "DATADIR=\"$DATADIR\""
        fi
    elif [ "$1" == "reset" ]; then
        debug "resetting config"        
        rm -f $CONFIGFILE $INDEX || error 1 "unable to reset $CONFIGFILE"
    elif [ "$1" == "set" -a $# == 3 ]; then
        debug "updating config: $2 = '$3'"
        echo "$2=\"$3\"" >> $CONFIGFILE
        rm -f ${INDEX}
    elif [ "$1" == "get" -a $# == 2 ]; then
        if [ ! -r $CONFIGFILE ]; then
            value=$(config show | grep $2)
        else
            value=$(grep ^$2 $CONFIGFILE | tail -n 1)
        fi
        if [ -z "$value" ]; then
            value=$(config show | grep $2)
        fi
        debug "getting config: $2 = '$value'"        
        echo $value | cut -f2 -d= | cut -f2 -d\"
    else
        error 1 "'$1' is an invalid config option"
    fi
}

function fetch_index()
{
    verbose "fetching index"
    if [ ! -d "$DATADIR" ]; then
        mkdir -p "$DATADIR" || error 1 "unable to create $DATADIR"
        debug "created $DATADIR"
    fi
    if [ ! -d "$CACHEDIR" ]; then
        mkdir -p "$CACHEDIR" || error 1 "unable to create $CACHEDIR"
        debug "created $CACHEDIR"
    fi
    if [ ! -f "$INDEX" ]; then
        debug "downloading ${GITBRANCH} index of $ORGANIZATION template archive from ${GITPROJ} (curl -sL $GITFILE/$ORGANIZATION/.index)... "
        curl -sL -f "$GITFILE/$ORGANIZATION/.index" >"$INDEX" || error 2 "index not found"
    fi
    if [ ! -f "$INDEX" ]; then
        error 1 "unable to fetch index"
    else
        debug "index=[$(cat $INDEX)]"
    fi
}

#
# command line interface
#
function help()
{    
    if [ $# == 0 ]; then
        cat <<-END
            Syntax: gridlabd template [options] <command> [...]
            Options:
                -b|--branch <branch>      Change branch from which template is downloaded
                -c|--contenturl <url>     Change URL for downloading template
                -d|--debug                Enable debugging output
                -f|--format <format>      Change output format (e.g., json, glm, csv, default)
                -g|--githuburl <url>      Change URL for editing template
                -o|--organization <org>   Change organization of template
                -q|--quiet                Suppress unnecessary output to stderr
                -qq|--veryquiet           Suppress all output to stderr
                -r|--repository <repo>    Change repository name of template
                -u|--user <login>         Change user name for editing template
                -v|--verbose              Enable verbose output
                -x                        Extended debug output with commmand echo
            Commands:
              help [<name>]        Get the list of template subcommands or help on a template
              index <pattern>      Index of available template data matching <pattern> in archive
              list <pattern>       List of available downloaded template data matching <pattern>
              get <pattern>        Download template data matching <pattern> from archive 
              delete <pattern>     Delete downloaded template data matching <pattern>
              copy <name> [<file>] Copy the contents of the template <name> into <file>
              clean                Clean up the local cache of the archive index
              open <local>         Open an editing session of template in <local>
              session <local> [<pattern>]  
                                   List current sessions in <local> (active session is first)
              add <local> <pattern>
                                   Add files <pattern> to the <local> repository
              save <local> ["<description>"]
                                   Save the <local> template changes
              submit <local>       Submit the saved changes to the template
              config show          Show the current configuration in environment format
                     reset         Reset the current configuration
                     set <N> <V>   Set configuration variable name <N> to value <V>
                     get <N> <V>   Get configuration variable name <N>
              defaults <template>  Show the default values of the template configuration file (if any)
END
    else
        for DOC in $(find $DATADIR -name $1.md -print); do
            if [ -z "$(which ${VIEWER:-pandoc})" ]; then
                more $DOC
            else
                ${VIEWER:-pandoc} $DOC -t plain | more
            fi
        done
    fi
}

function clean()
{
    verbose "deleting $CACHEDIR"
    rm -rf "$CACHEDIR"
    if [ -d "$CACHEDIR" ]; then
        error 1 "unable to delete $CACHEDIR"
    else
        debug "removed $CACHEDIR" 
    fi
    fetch_index
}

function index()
{
    fetch_index
    if [ $# -eq 0 ]; then
        LIST=$(cat $INDEX)
    else
        LIST=$(grep "$1" $INDEX)
    fi
    if [ "$FORMAT" == "glm" ]; then
        echo "#define TEMPLATE_INDEX=$LIST"
    elif [ "$FORMAT" == "csv" ]; then
        echo "filename,pathname"
        for f in $LIST; do
            echo "$f,\"$INDEX/$f\""
        done
    elif [ "$FORMAT" == "json" ]; then
        echo "{"
        first=yes
        for f in $LIST; do
            if [ "$first" == "no" ]; then
                echo ","
            else
                first=no
            fi
            echo -n "    \"$f\" : \"$INDEX/$f\""
        done
        echo ""
        echo "}"
    else
        for f in $LIST; do
            echo $f
        done
    fi
}

function list()
{
    fetch_index
    for f in $(export FORMAT=default; index $1); do
        if [ -d "$DATADIR/$f" ]; then
            echo $f
        fi
    done
}

function get()
{
    fetch_index
    FOUND=0
    for TEMPLATE in $(export FORMAT=default; index $1); do
        SRCDIR="$GITFILE/$ORGANIZATION/$TEMPLATE"
        DSTDIR="$GLD_ETC/template/$ORGANIZATION/$TEMPLATE"
        mkdir -p $DSTDIR
        debug "looking for catalog in $SRCDIR/.catalog"
        CATALOG=$(curl -sL -f "$SRCDIR/.catalog" "$DSTDIR" | grep -v '^#' | cut -f1 -d:) # || error 2 "missing template catalog")
        if [ -z "$CATALOG" ]; then
            verbose "no catalog found; extracting legacy template from $GITFILE/$ORGANIZATION/$TEMPLATE.zip"
            (curl -sL "$GITFILE/$ORGANIZATION/$TEMPLATE.zip" > "/tmp/$$.zip" && unzip -q -o -d "$GLD_ETC/template" "/tmp/$$") || (rm -f "/tmp/$$"; error 1 "unable to download $f")
        else
            verbose "downloading template from $SRCDIR/.catalog: $(echo $CATALOG | tr -c 'A-Za-z_.' ' ')"
            for FILE in $CATALOG; do
                curl -sL -f "$SRCDIR/$FILE" > "$DSTDIR/$FILE" || error 2 "unable to download '$FILE'"
                debug "catalog file $FILE ok"
            done
            test -f "$DSTDIR/$TEMPLATE.md" || warning "no documentation found"
            debug "documentation file $TEMPLATE.md ok"
        fi
        FOUND=$((${FOUND}+1))
    done
    if [ ${FOUND} -eq 0 ]; then
        error 1 "no template(s) not found"
    fi
    verbose "${FOUND} templates downloaded"
}

function copy()
{
    fetch_index
    if [ $# -eq 0 ]; then
        error 1 "missing template name"
    fi
    FROM="$DATADIR/$1"
    if [ ! -r "$FROM" ]; then
        error 2 "$FROM not found"
    fi
    TO=$1
    if [ $# -gt 1 ]; then
        TO=$2
    fi
    if [ -f "$TO" ]; then
        error 3 "$TO exists"
    fi
    if [ $# -eq 1 ]; then
        cp $FROM $TO || exit 4
        exit 0
    fi
    EXT="${TO##*.}"
    TMP="/tmp/tmp-$$"
    sed -e '1,$s/^#define TEMPLATE_Module="\(.*\)"/module \1;/' < "$FROM" > "$TMP.glm" || exit 5
    gridlabd -D filesave_options=OBJECTS -D glm_save_options=MINIMAL -C "$TMP.glm" -o "$TMP.$EXT" || exit 6
    cat "$TMP.$EXT" > "$TO" || exit 7
    rm -f "$TMP.*"
}

function delete()
{
    fetch_index
    for f in $(export FORMAT=default; index $1); do
        if [ -d "$DATADIR/$f" ]; then
            rm -rf "$DATADIR/$f" || error 1 "unable to delete $f"
        fi
    done

}

function open()
{
    if [ $# -eq 0 ]; then
        error 1 "missing local template name"
    fi
    LIBDIR="$1"
    if [ -d "$LIBDIR" -a -d "$LIBDIR/.git" ]; then
        cd "$LIBDIR"
        git pull -q
    else
        git clone -q "$GITPROJ" "$LIBDIR"
        cd "$LIBDIR"
    fi
    if [ ! -d .git ]; then
        error 3 "$LIBDIR is not a valid git repository (missing $LIDIR/.git)"
    fi
    EMAIL=$(git config --get user.email)
    if [ -z "$EMAIL" ]; then
        error 3 "user.email not set for repository $LIBDIR"
    fi
    SESSION="$USER/$(date '+%y%m%d/%H%M%S')"
    git checkout -q -b $SESSION
}

function session()
{
    if [ $# -eq 0 ]; then
        error 1 "missing local template name"
    fi
    LIBDIR="$1"
    if [ ! -d "$LIBDIR" -o ! -d "$LIBDIR/.git" ]; then
        error 2 "$LIBDIR is not a valid local template"
    fi
    if [ $# -eq 1 ]; then
        git branch | sort -r | cut -c3- | grep "^$USER/"
    else
        git checkout -q $2
    fi
}

function save()
{
    if [ $# -eq 0 ]; then
        error 1 "missing local template name"
    fi
    LIBDIR="$1"
    if [ ! -d "$LIBDIR/.git" ]; then
        error 2 "$LIBDIR is not a valid git repository (missing $LIDIR/.git)"
    fi
    cd "$LIBDIR"
    if [ $# -eq 1 ]; then
        $MESSAGE="Save by $USER on $DATE"
    else
        $MESSAGE="$2"
    fi
    git commit -a -m "$MESSAGE"
    git push
    SESSION=$(git branch | grep '^*' | cut -f2 -d' ')
    file="$GITPROJ/compare/master...$SESSION"
    eval "$OPENURLCMD"
}

function add()
{
    if [ $# -eq 0 ]; then
        error 1 "missing local template name"
    fi
    LIBDIR="$1"
    if [ $# -eq 1 ]; then
        error 2 "missing file name"
    fi
    cd "$LIBDIR"
    git add -q "$2"
}

function defaults()
{
    if [ $# -eq 0 ]; then
        error 1 "missing template name"
    fi
    python3 $DATADIR/$1/$1.py --defaults
}

while [ "${1:0:1}" == "-" ]; do
    case "$1" in
    (-b|--branch)
        GITBRANCH="$2"
        shift 2
        ;;
    (-c|--contenturl)
        GITHUBUSERCONTENT="$2"
        shift 2
        ;;
    (-d|--debug)
        DEBUG="yes"
        shift 1
        ;;
    (-f|--format)
        FORMAT="$2"
        shift 2
        ;;
    (-g|--githuburl)
        GITHUB="$2"
        shift 2
        ;;
    (-o|--organization)
        ORGANIZATION="$2"
        shift 2
        ;;
    (-q|--quiet)
        QUIET="yes"
        shift 1
        ;;
    (-qq|--veryquiet)
        QUIET="very"
        shift 1
        ;;
    (-r|--repository)
        GITREPO="$2"
        shift 2
        ;;
    (-u|--user)
        GITUSER="$2"
        shift 2
        ;;
    (-v|--verbose)
        VERBOSE="yes"
        shift 1
        ;;
    (-x)
        set -x
        shift 1
        ;;
    (*)
        error 1 "option '$1' is not valid"
        ;;
    esac
done

# set the internal parameters
CACHEDIR="$DATADIR/.gridlabd-template"
GITPROJ="$GITHUB/$GITUSER/$GITREPO"
GITFILE="$GITHUBUSERCONTENT/$GITUSER/$GITREPO/$GITBRANCH"
COMMIT_ID=$(git ls-remote "$GITPROJ" | grep "$GITBRANCH" | head -n 1 | cut -f1)
INDEX=$CACHEDIR/$COMMIT_ID

# process command
if [ $# == 0 -o "$1" == "help" ]; then
    help $2
    exit 0
elif [ "$(type -t $1)" == "function" ]; then
    $*
    exit 0
else
    error 1 "'$1' is not a valid template command"
fi
error 1 "invalid result"