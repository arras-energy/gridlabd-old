#!/usr/local/bin/python3
"""gridlabd-compare subcommand
"""

import sys, getopt
import json

# options
class config:
    """Configuration options
    """
    verbose = False # enumerate individual differences
    quiet = False # do not list files that differ
    glm = False # list changes using GLM syntax
    include = {} # list of comparison to include
    exclude = {} # list of comparison to exclude

def help():
    """Obtain command line help information
    """
    print("""Syntax: gridlabd-compare [OPTIONS] FILE1 FILE2
Options:
    -g|--glm        output differences are GLM modify commands (implies verbose)
    -h|--help       obtain this help
    -q|--quiet      do not write any output (only use exit code)
    -v|--verbose    output individual differences

Contraints:
    -C|--class      class constraint
    -G|--global     global variable constraint   
    -M|--module     module constraint
    -O|--object     object constraint
    -P|--property   property constraint

    All constraints limit comparisons to those that are included in the
    constraint, e.g., "class=assert" will only compare "assert" classes, and
    "object=A*,B*" will only compare objects having names starting A or B.  When
    multiple groups are specified, the comparison must match all. If the value is
    preceeded by a hyphen, the group is excluded from the comparison.  Note that
    inclusion starts with all classes being excluded and exclusion starts with all
    classes being included. Therefore the two constraints cannot be mixed.  
""")

def perror(msg,exit=None):
    """Print an error message

    Error messages are suppressed by the quiet option
    """
    if not config.quiet:
        print(f'ERROR [compare]: {msg}',file=sys.stderr)
    if exit:
        sys.exit(exit)

def pwarning(msg,exit=None):
    """Print a warning message

    Warning messages are suppressed by the quiet option
    """
    if not config.quiet:
        print(f'WARNING [compare]: {msg}',file=sys.stderr)
    if exit:
        sys.exit(exit)

def poutput(msg):
    """Print an output message

    Outputs messages are enabled by the verbose option
    """
    if config.verbose:
        print(msg,file=sys.stdout)

def compare(file1,file2):
    """Compare two files
    """
    try:
        with open(file1) as fh: f1 = json.load(fh)
        with open(file2) as fh: f2 = json.load(fh)
    except Exception as err:
        perror(f'{err}',-2)

    if config.glm:
        poutput(f'// {file1} -> {file2}: compare not implemented')
    else:
        poutput(f'{file1} -> {file2}: compare not implemented')
    return 0

def constrain(type=None,value=None):
    """Constrain what is compared
    """
    if value[0] == '-': # exclude
        if config.include:
            perror("ignoring exclude after including")
        config.exclude[type] = value[1:].split(',')
    else: # include
        if config.exclude:
            perror("ignoring include after excluding ")
        config.include[type] = value.split(',')
    return

def main():
    opts,args = getopt.getopt(sys.argv[1:],'ghqvC:G:M:O:P:',
        ['glm','help','quiet','verbose',
         'class=','global=','module=','object=','property=',])

    if not opts and not args:
        help()
        sys.exit(-1)

    for opt,arg in opts:
        if opt in ('-g','--glm'):
            config.glm = True
            config.verbose = True
        elif opt in ('-h','--help'):
            help()
            sys.exit(0)
        elif opt in ('-q','--quiet'):
            config.quiet = True
        elif opt in ('-v','--verbose'):
            config.verbose = True
        elif opt in ('-C','--class'):
            constrain('class',arg)
        elif opt in ('-G','--global'):
            constrain('global',arg)
        elif opt in ('-O','--object'):
            constrain('object',arg)
        elif opt in ('-P','--property'):
            constrain('property',arg)
        elif opt in ('-M','--module'):
            constrain('module',arg)
        else:
            perror(f'{opt} is an invalid option',exit=-1)

    if len(args) > 1:
        file1 = args[0]
        diff = 0
        for file2 in args[1:]:
            diff += compare(file1,file2)
        return diff
    else:
        perror('missing file')

if __name__ == "__main__":
    main()