#!/bin/bash

FILE1="/dev/stdin"
FILE2="/dev/stdout"
TYPE1=""
TYPE2=""
VERBOSE=false
SYNTAX="Syntax: gridlabd convert [-v|--verbose] [-f|--from TYPE1] FILE1 [-t|--to TYPE2] FILE2 [OPTIONS]"

if [ $# -lt 2 ]; then
	echo $SYNTAX
	exit 1
fi

function error ()
{
	EXITCODE=$1
	shift 1
	echo "ERROR [convert]: $*" > /dev/stderr
	exit $EXITCODE
}

function warning ()
{
	echo "WARNING [convert]: $*" > /dev/stderr
}

function verbose()
{
	if ( $VERBOSE ); then
		echo "VERBOSE [convert]: $*" > /dev/stderr
	fi
}

OPTIONS=""

while [ $# -gt 0 ]; do
	if [ "$1" == "-h" -o "$1" == "--help" ]; then
		echo $SYNTAX
		exit 0
	elif [ "$1" == "-v" -o "$1" == "--verbose" ]; then
		VERBOSE=true
		verbose "verbose is enabled"
	elif [ "$1" == "-f" -o "$1" == "--from" ]; then
		if [ $# -lt 2 ]; then
			error 1 "missing 'to' type"
		fi
		TYPE1=$2
		verbose "input file type '$TYPE1'"
		shift 1
	elif [ "$1" == "-t" -o "$1" == "--to" ]; then
		if [ $# -lt 2 ]; then
			error 1 "missing 'to' type"
		fi
		TYPE2=$2
		verbose "input file type '$TYPE2'"
		shift 1
	elif [ "$FILE1" == "/dev/stdin" ]; then
		FILE1=$1
		verbose "input file '$FILE1'"
	elif [ "$FILE2" == "/dev/stdout" ]; then
		FILE2=$1
		verbose "output file '$FILE2'"
	else
		OPTIONS=$OPTIONS $1
		verbose "option '$1'"
	fi
	shift 1
done

if [ -z "$TYPE1" ]; then
	NAME=$(basename "${FILE1}")
	TYPE1=${NAME##*.}
	verbose "automatic input file type '$TYPE1'"
fi
if [ -z "$TYPE1" ]; then
	error 1 "no input file type identified (no extension or --from option)"
fi

if [ -z "$TYPE2" ]; then
	NAME=$(basename "${FILE2}")
	TYPE2=${NAME##*.}
	verbose "automatic output file type '$TYPE2'"
fi
if [ -z "$TYPE2" ]; then
	error 1 "no output file type identified (no extension or --to option)"
fi

verbose "Calling '/usr/local/bin/python3 \"${GLD_ETC}/${TYPE1}2${TYPE2}.py\" -i \"$FILE1\" -o \"$FILE2\" $OPTIONS'"
/usr/local/bin/python3 "${GLD_ETC}/${TYPE1}2${TYPE2}.py" -i "$FILE1" -o "$FILE2" $OPTIONS
