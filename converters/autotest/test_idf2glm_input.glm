// generated by /usr/local/opt/gridlabd/4.3.1-221122-develop_add_idf_converter/share/gridlabd/idf2glm.py -i test_idf2glm_input.idf -o test_idf2glm_input.glm on 2023-01-07 06:03:03.740108
// output to test_idf2glm_input.glm
class building 
{
	double dt[s]; // timestep to use when modeling building response to inputs
	double TA[degC]; // (OUTPUT) indoor air temperature
	double TM[degC]; // (OUTPUT) building mass temperature
	double M[pu]; // (OUTPUT) system mode per unit system capacity
	double ES[J]; // (OUTPUT) stored energy
	double UA[W/K]; // (REQUIRED) conductance from interior air to outdoor air
	double CA[J/K]; // (REQUIRED) heat capacity of indoor air volume
	double UI[W/K]; // (REQUIRED) conductance from building mass to indoor air
	double CM[J/K]; // (REQUIRED) heat capacity of building mass
	double UM[W/K]; // (REQUIRED) conductance of building mass to outdoor air
	double TH[degC]; // (REQUIRED) heating design temperature
	double TC[degC]; // (REQUIRED) cooling design temperature
	double DF[pu]; // system over-design factor
	double QH[W]; // (REQUIRED,OUTPUT) HVAC system capacity
	double QE[W/m^2]; // (REQUIRED) nomimal enduse load capacity
	double QG[W/m^2]; // (REQUIRED) natural gas heat per unit nominal enduse capacity
	double QO[W/unit]; // (REQUIRED) heat gain per occupant
	double QV[W/unit]; // (REQUIRED) ventilation gain per occupant
	double SA[m^2]; // (REQUIRED) building mass area exposed to solar radiation
	double PV[m^2]; // area of photovoltaic rooftop panels
	double BS[J]; // battery storage capacity
	double PX[W]; // maximum export power
	double PG[W]; // maximum inverter power
	double K[pu]; // HVAC mode proportional control gain w.r.t indoor temperature
	enumeration {UL1741=3, CARULE21=2, IEEE1547=1, UNITY=0} IC; // inverter power factor control
	double TO[degC]; // outdoor air temperature
	double EU[unit]; // enduse load fraction
	double NG[unit]; // natural gas demand
	double NH[unit]; // building occupants
	double QS[W/m^2]; // insolation
	double TS[degC]; // (REQUIRED) thermostat setpoint
	double PZM[pu]; // (OUTPUT) constant impedance HVAC real power per unit system capacity
	double PPM[pu]; // (OUTPUT) constant power HVAC real power per unit system capacity
	double QPM[pu]; // (OUTPUT) constant power HVAC reactive power per unit system capacity
	double PZE[pu]; // (OUTPUT) constant impedance end-use real power fraction
	double PIE[pu]; // (OUTPUT) constant current end-use real power fraction
	double PPE[pu]; // (OUTPUT) constant power end-use real power fraction
	double QZE[pu]; // (OUTPUT) constant impedance end-use reactive fraction
	double QIE[pu]; // (OUTPUT) constant current end-use reactive fraction
	double QPE[pu]; // (OUTPUT) constant power end-use reactive fraction
	double PPH[pu]; // (OUTPUT) constant power ventilation real power per unit occupancy
	double QPH[pu]; // (OUTPUT) constant power ventilation reactive power per unit occupancy
	double measured_real_power[W]; // (OUTPUT) metered real power demand
	double measured_reactive_power[VAr]; // (OUTPUT) metered reactive power demand
	double measured_real_energy[Wh]; // (OUTPUT) cumulative metered real energy consumption
	double measured_real_energy_delta[Wh]; // (OUTPUT) metered real energy interval consumption
	double measured_reactive_energy[Wh]; // (OUTPUT) cumulative metered reactive energy consumption
	double measured_reactive_energy_delta[Wh]; // (OUTPUT) metered reactive energy interval consumption
	double measured_energy_delta_timestep[s]; // (OUTPUT) energy metering interval
	double measured_demand[W]; // (OUTPUT) maximum metered real power interval demand
	double measured_demand_timestep[s]; // (OUTPUT) maximum power metering interval
	double measured_resource_power[W]; // (OUTPUT) measured net distributed generation production from solar and batteries
	char256 temperature_source; // temperature weather object source property
	char256 solar_source; // solar weather object source property
	char256 cooling_design; // cooling design temperature source property
	char256 heating_design; // heating design temperature source property
	char32 building_type; // building type used to be lookup defaults and enduse loadshapes
	double floor_area[m^2]; // (REQUIRED) building floor area
	double electric_gain_fraction[pu]; // (REQUIRED) fraction of electric end-use heat gain to the building
	double gas_gain_fraction[pu]; // (REQUIRED) fraction of gas end-use heat gain to the building
	double electrification_fraction[pu]; // (REQUIRED) fraction of gas enduses that are converted to electricity
	double electrification_efficiency[pu]; // (REQUIRED) performance of electric end-use relative to gas enduse
	int32 occupancy; // building occupancy
	bool electric_heat; // flag to specified whether heating is electric
}

// input from test_idf2glm_input.idf
object building {
	name "Metal Roof Surface";
	latitude 37.62;
	longitude -122.4;
	temperature_source "9q8yn8.temperature";
	solar_source "9q8yn8.solar_global";
	// occupancy 2 unit;
	// lighting 1070 W;
	// equipment 549 W;
	// floor_area 127.5 m^2;
	// perimeter 45.9 m;
	// window_area 17.6 m^2;
	// wall_area 125.9 m^2;
	// roof_area 127.5 m^2;
	// thermal_conductance 133.3 W/K;
	// thermal_mass 10.9 MJ/K;
	// solar_absorptance 0.000 pu;
	// solar_transmittance 0.000 pu;
}
//#set savefile=${modelname/.glm/.json}
