"""Convert EnergyPlus building to GLM load"""

import sys, os 
import json
import getopt
import datetime
import math

config = {
    "input" : "idf",
    "output" : "glm",
    # "from" : ["ami","scada","onpoint-weather", "table"],
    # "type" : ["ceus","rbsa","climate", "object"],
    }

def help():
    print('Syntax:')
    print(f'{config["input"]}2{config["output"]}.py -i|--input <input-file>[,<input-file>[,...]] -o|--output <output-file> [options ...]')
    print(f'  -c|--config    : [OPTIONAL] display converter configuration')
    print(f'  -i|--ifile     : [REQUIRED] {config["input"]} input file name')
    print(f'  -o|--ofile     : [REQUIRED] {config["output"]} output file name')
    print(f'  -f|--from      : [REQUIRED] input {config["input"]} data type')
    print(f'  -t|--type      : [REQUIRED] output {config["output"]} data type')
    print(f'  -p|--property  : [OPTIONAL] property option')
    print(f'  -C|--class     : [OPTIONAL] default class definition when generating GLM objects')
    print(f'  -M|--module    : [OPTIONAL] default module definition when generating GLM objects')
    print(f'  -O|--option=KEY:VALUE : [OPTIONAL] set converter option KEY=VALUE')

def error(msg):
    print(f'ERROR    [{config["input"]}2{config["output"]}]: {msg}')
    sys.exit(1)

input_file = "autotest/test_idf2glm_input.idf"
output_file = "autotest/test_idf2glm_output.glm"
options = {}

opts, args = getopt.getopt(sys.argv[1:],"hi:o:",["help","config","ifile=","ofile="])

# if not opts : 
#     help()
#     sys.exit(1)

for opt, arg in opts:
    if opt in ("-h","--help"):
        help()
        sys.exit(0)
    elif opt in ("-i","--input"):
        input_file = arg.strip()
    elif opt in ("-o","--output"):
        output_file = arg.strip()
    else:
        error(f"{opt}={arg} is not a valid option");

if input_file == None:
    error("missing input file name")
elif output_file == None:
    error("missing output file name")

with open(output_file,"wt") as glm:
	glm.write(f"""// generated by {' '.join(sys.argv)} on {datetime.datetime.now()}
// output to {output_file}
class building {{
	char32 weather;
	double occupancy[unit/sf];
	double lighting[W/sf];
	double equipment[W/sf];
	double floor_area[sf];
	double perimeter[ft];
}}
""")
	for file in input_file.split(","):
		with open(file,"rt") as fh:
			idf = {}
			section = None
			for line in fh.readlines():
				if not line or line[0] == '\n':
					continue
				if line and line[0] in [' ','\t']:
					value,name = line.split('!-')
					name = name.strip(' ,;\n')
					def convert(x):
						x = x.strip(' ,;')
						try: return int(x)
						except: pass
						try: return float(x)
						except: pass
						return x
					value = [convert(x) for x in value.split(',')]
					while value and value[-1] in (None,''):
						del value[-1]
					if name == 'Name':
						subsection = value[0]
						idf[section][subsection] = {}
						continue
					if len(value) == 0:
						value = None
					elif len(value) == 1:
						value = value[0]
					if subsection:
						idf[section][subsection][name] = value
					else:
						idf[section][name] = value
				else:
					section = line.strip(' ,\n')
					if section not in idf:
						idf[section] = {}
					subsection = None

		name = list(idf['Building'].keys())[0];
		if name[0] not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_":
			name = f"_{name[1:]}"
		location = list(idf['Site:Location'].keys())[0]
		latitude = idf['Site:Location'][location]['Latitude {deg}']
		longitude = idf['Site:Location'][location]['Longitude {deg}']
		occupancy = sum([data['People per Zone Floor Area {person/m2}'] for data in idf['People'].values()])
		lighting = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['Lights'].values()])
		equipment = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['ElectricEquipment'].values()])
		def _geometry(data):
			g0 = 0.0
			g1 = 0.0
			last = None
			first = None
			def length(a,b):
				return math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2+(a[2]-b[2])**2)
			def area(a,b):
				return 0.5*math.fabs(a[0]*b[1]-a[1]*b[0])
			for key,value in data.items():
				if key.startswith('X,Y,Z Vertex'):
					if last:
						g0 += length(last,value)
						g1 += area(last,value)
					if not first:
						first = value
					last = value
			if first:
				g0 += length(last,first)
				g1 += area(last,first)
			result = dict(perimeter=g0,area=g1)
			# print(f"geometry({data}) --> {result}")
			return result
		floor_area = sum([_geometry(data)['area'] for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])
		perimeter = sum([_geometry(data)['perimeter'] for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])

		glm.write(f"""
// input from {input_file}
object building {{
	name "{name[:63]}";
	latitude {latitude};
	longitude {longitude};
	weather ${{GEOCODE {latitude},{longitude}#6}};
	occupancy {occupancy:.3g} unit/m^2;
	lighting {lighting:.3g} W/m^2;
	equipment {equipment:.3g} W/m^2;
	floor_area {floor_area:.4g} m^2;
	perimeter {perimeter:.3g} m;
}}
//#set savefile=${{modelname/.glm/.json}}
""")

		# json.dump(idf,sys.stdout,indent=4)

