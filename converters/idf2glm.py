"""Convert EnergyPlus building to GLM load"""

import sys, os 
import json
import getopt
import datetime
import math
import re

config = {
	"input" : "idf",
	"output" : "glm",
	# "from" : ["ami","scada","onpoint-weather", "table"],
	# "type" : ["ceus","rbsa","climate", "object"],
	}

def help():
	print('Syntax:')
	print(f'{config["input"]}2{config["output"]}.py -i|--input <input-file>[,<input-file>[,...]] -o|--output <output-file> [options ...]')
	print(f'  -c|--config	: [OPTIONAL] display converter configuration')
	print(f'  -i|--ifile	 : [REQUIRED] {config["input"]} input file name')
	print(f'  -o|--ofile	 : [REQUIRED] {config["output"]} output file name')
	print(f'  -f|--from	  : [REQUIRED] input {config["input"]} data type')
	print(f'  -t|--type	  : [REQUIRED] output {config["output"]} data type')
	print(f'  -p|--property  : [OPTIONAL] property option')
	print(f'  -C|--class	 : [OPTIONAL] default class definition when generating GLM objects')
	print(f'  -M|--module	: [OPTIONAL] default module definition when generating GLM objects')
	print(f'  -O|--option=KEY:VALUE : [OPTIONAL] set converter option KEY=VALUE')

def error(msg):
	print(f'ERROR	[{config["input"]}2{config["output"]}]: {msg}')
	sys.exit(1)

input_file = "autotest/test_idf2glm_input.idf"
output_file = "autotest/test_idf2glm_output.glm"
options = {}

opts, args = getopt.getopt(sys.argv[1:],"hi:o:",["help","config","ifile=","ofile="])

# if not opts : 
#	 help()
#	 sys.exit(1)

for opt, arg in opts:
	if opt in ("-h","--help"):
		help()
		sys.exit(0)
	elif opt in ("-i","--input"):
		input_file = arg.strip()
	elif opt in ("-o","--output"):
		output_file = arg.strip()
	else:
		error(f"{opt}={arg} is not a valid option");

if input_file == None:
	error("missing input file name")
elif output_file == None:
	error("missing output file name")

with open(output_file,"wt") as glm:
	glm.write(f"""// generated by {' '.join(sys.argv)} on {datetime.datetime.now()}
// output to {output_file}
class building {{
	char32 weather;
	double occupancy[unit/sf];
	double lighting[W/sf];
	double equipment[W/sf];
	double floor_area[sf];
	double perimeter[ft];
	double roof_area[sf];
	double window_area[sf];
	double wall_area[sf];
	double foundation_f[Btu/degF/h];
}}
""")
	for file in input_file.split(","):
		with open(file,"rt") as fh:
			idf = {}
			section = None
			for line in fh.readlines():
				if not line or line[0] == '\n':
					continue
				if line and line[0] in [' ','\t']:
					value,name = line.split('!-')
					name = name.strip(' ,;\n')
					def convert(x):
						x = x.strip(' ,;')
						try: return int(x)
						except: pass
						try: return float(x)
						except: pass
						return x
					value = [convert(x) for x in value.split(',')]
					while value and value[-1] in (None,''):
						del value[-1]
					if name == 'Name':
						subsection = value[0]
						idf[section][subsection] = {}
						continue
					if len(value) == 0:
						value = None
					elif len(value) == 1:
						value = value[0]
					if subsection:
						idf[section][subsection][name] = value
					else:
						idf[section][name] = value
				else:
					section = line.strip(' ,\n')
					if section not in idf:
						idf[section] = {}
					subsection = None

		# clean the name
		name = re.sub('[^-0-9A-Za-z_]','',list(idf['Building'].keys())[0].replace(' ','_'));
		name = re.sub('_+','_',name).strip('_')
		if name[0] == '-':
			name = name[1:63]

		location = list(idf['Site:Location'].keys())[0]
		latitude = idf['Site:Location'][location]['Latitude {deg}']
		longitude = idf['Site:Location'][location]['Longitude {deg}']
		occupancy = sum([data['People per Zone Floor Area {person/m2}'] for data in idf['People'].values()])
		lighting = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['Lights'].values()])
		equipment = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['ElectricEquipment'].values()])
		
		# perimeter of polygon
		def perimeter(poly):
			P = 0.0
			pp = poly[1:]
			pp.append(poly[0])
			for a,b in zip(poly,pp):
				P += math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2+(a[2]-b[2])**2)
			return P

		#determinant of matrix a
		def det(a):
			return a[0][0]*a[1][1]*a[2][2] + a[0][1]*a[1][2]*a[2][0] + a[0][2]*a[1][0]*a[2][1] - a[0][2]*a[1][1]*a[2][0] - a[0][1]*a[1][0]*a[2][2] - a[0][0]*a[1][2]*a[2][1]

		#unit normal vector of plane defined by points a, b, and c
		def unit_normal(a, b, c):
			x = det([[1,a[1],a[2]],
					 [1,b[1],b[2]],
					 [1,c[1],c[2]]])
			y = det([[a[0],1,a[2]],
					 [b[0],1,b[2]],
					 [c[0],1,c[2]]])
			z = det([[a[0],a[1],1],
					 [b[0],b[1],1],
					 [c[0],c[1],1]])
			magnitude = (x**2 + y**2 + z**2)**.5
			return (x/magnitude, y/magnitude, z/magnitude)

		#dot product of vectors a and b
		def dot(a, b):
			return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]

		#cross product of vectors a and b
		def cross(a, b):
			x = a[1] * b[2] - a[2] * b[1]
			y = a[2] * b[0] - a[0] * b[2]
			z = a[0] * b[1] - a[1] * b[0]
			return (x, y, z)

		#area of polygon poly
		def area(poly):
			if len(poly) < 3: # not a plane - no area
				return 0

			total = [0, 0, 0]
			for i in range(len(poly)):
				vi1 = poly[i]
				if i is len(poly)-1:
					vi2 = poly[0]
				else:
					vi2 = poly[i+1]
				prod = cross(vi1, vi2)
				total[0] += prod[0]
				total[1] += prod[1]
				total[2] += prod[2]
			result = abs(dot(total, unit_normal(poly[0], poly[1], poly[2])))/2
			# print("Area",poly,"-->",result)
			return result

		def height(poly):
			z = [p[2] for p in poly]
			return max(z) - min(z)

		def vertices(data):
			pts = []
			for key,value in data.items():
				if key.startswith('X,Y,Z Vertex'):
					pts.append(value)
			return pts

		floor_area = sum([area(vertices(data)) for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])
		wall_perimeter = sum([perimeter(vertices(data)) for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])
		wall_height = max([height(vertices(data)) for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Wall'])
		wall_area = sum([area(vertices(data)) for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Wall'])
		window_area = sum([area(vertices(data)) for data in idf['FenestrationSurface:Detailed'].values() if data['Surface Type'] == 'Window'])
		roof_area = sum([area(vertices(data)) for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Roof'])
		foundation_f = sum([data['F-Factor {W/m-K}']*data['PerimeterExposed {m}'] for data in idf['Construction:FfactorGroundFloor'].values()])

		glm.write(f"""
// input from {input_file}
object building {{
	name "{name[:63]}";
	latitude {latitude};
	longitude {longitude};
	weather "${{GEOCODE {latitude},{longitude}#6}}";
	occupancy {occupancy:.3g} unit/m^2;
	lighting {lighting:.3g} W/m^2;
	equipment {equipment:.3g} W/m^2;
	floor_area {floor_area:.4g} m^2;
	perimeter {wall_perimeter:.3g} m;
	window_area {window_area:.3g} m^2;
	wall_area {wall_area:.3g} m^2;
	roof_area {roof_area:.3g} m^2;
	foundation_f {foundation_f} W/K;
}}
//#set savefile=${{modelname/.glm/.json}}
""")

		# json.dump(idf,sys.stdout,indent=4)

