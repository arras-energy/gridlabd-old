"""Convert EnergyPlus building to GLM load"""

import sys, os 
import json
import getopt
import datetime
import re

from geometry import Polygon
from geohash import geohash
from idfparse import IDF

config = {
	"input" : "idf",
	"output" : "glm",
	# "from" : ["ami","scada","onpoint-weather", "table"],
	# "type" : ["ceus","rbsa","climate", "object"],
	}

def help():
	print('Syntax:')
	print(f'{config["input"]}2{config["output"]}.py -i|--input <input-file>[,<input-file>[,...]] -o|--output <output-file> [options ...]')
	print(f'  -c|--config	: [OPTIONAL] display converter configuration')
	print(f'  -i|--ifile	 : [REQUIRED] {config["input"]} input file name')
	print(f'  -o|--ofile	 : [REQUIRED] {config["output"]} output file name')
	print(f'  -f|--from	  : [REQUIRED] input {config["input"]} data type')
	print(f'  -t|--type	  : [REQUIRED] output {config["output"]} data type')
	print(f'  -p|--property  : [OPTIONAL] property option')
	print(f'  -C|--class	 : [OPTIONAL] default class definition when generating GLM objects')
	print(f'  -M|--module	: [OPTIONAL] default module definition when generating GLM objects')
	print(f'  -O|--option=KEY:VALUE : [OPTIONAL] set converter option KEY=VALUE')

def error(msg):
	print(f'ERROR	[{config["input"]}2{config["output"]}]: {msg}')
	sys.exit(1)

def vertices(data):
	pts = []
	for key,value in data.items():
		if key.startswith('X,Y,Z Vertex'):
			pts.append(value)
	return Polygon(pts)

# TODO: remove default files (only for dev)
input_files = ["autotest/test_idf2glm_input.idf"]
output_file = "autotest/test_idf2glm_output.glm"
options = {}

opts, args = getopt.getopt(sys.argv[1:],"hi:o:",["help","config","ifile=","ofile="])

# if not opts : 
#	 help()
#	 sys.exit(1)

for opt, arg in opts:
	if opt in ("-h","--help"):
		help()
		sys.exit(0)
	elif opt in ("-i","--input"):
		input_files.append(arg.strip())
	elif opt in ("-o","--output"):
		output_file = arg.strip()
	else:
		error(f"{opt}={arg} is not a valid option");

if not input_files:
	error("missing input file name")
elif output_file == None:
	error("missing output file name")

with open(output_file,"wt") as glm:
	glm.write(f"""// generated by {' '.join(sys.argv)} on {datetime.datetime.now()}
// output to {output_file}
class building {{
	char32 weather;
	double occupancy[unit/sf];
	double lighting[W/sf];
	double equipment[W/sf];
	double floor_area[sf];
	double perimeter[ft];
	double roof_area[sf];
	double window_area[sf];
	double wall_area[sf];
	double foundation_f[Btu/degF/h];
}}
""")
	for file in input_files:
		idf = IDF(file)

		# clean the name
		name = re.sub('[^-0-9A-Za-z_]','',list(idf['Building'].keys())[0].replace(' ','_'));
		name = re.sub('_+','_',name).strip('_')
		if name[0] == '-':
			name = name[1:63]

		location = list(idf['Site:Location'].keys())[0]
		latitude = idf['Site:Location'][location]['Latitude {deg}']
		longitude = idf['Site:Location'][location]['Longitude {deg}']
		occupancy = sum([data['People per Zone Floor Area {person/m2}'] for data in idf['People'].values()])
		lighting = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['Lights'].values()])
		equipment = sum([data['Watts per Zone Floor Area {W/m2}'] for data in idf['ElectricEquipment'].values()])
		
		# basic building properties
		floor_area = sum([vertices(data).area() for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])
		wall_perimeter = sum([vertices(data).perimeter() for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Floor'])
		wall_height = max([vertices(data).height() for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Wall'])
		wall_area = sum([vertices(data).area() for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Wall'])
		window_area = sum([vertices(data).area() for data in idf['FenestrationSurface:Detailed'].values() if data['Surface Type'] == 'Window'])
		roof_area = sum([vertices(data).area() for data in idf['BuildingSurface:Detailed'].values() if data['Surface Type'] == 'Roof'])
		foundation_f = sum([data['F-Factor {W/m-K}']*data['PerimeterExposed {m}'] for data in idf['Construction:FfactorGroundFloor'].values()])

		glm.write(f"""
// input from {file}
object building {{
	name "{name[:63]}";
	latitude {latitude};
	longitude {longitude};
	weather "{geohash(latitude,longitude,6)}";
	occupancy {occupancy:.3g} unit/m^2;
	lighting {lighting:.3g} W/m^2;
	equipment {equipment:.3g} W/m^2;
	floor_area {floor_area:.4g} m^2;
	perimeter {wall_perimeter:.3g} m;
	window_area {window_area:.3g} m^2;
	wall_area {wall_area:.3g} m^2;
	roof_area {roof_area:.3g} m^2;
	foundation_f {foundation_f:.1g} W/K;
}}
//#set savefile=${{modelname/.glm/.json}}
""")

		# json.dump(idf,sys.stdout,indent=4)

