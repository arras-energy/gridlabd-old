%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: gridlabd
file_extensions:
  - glm
scope: source.glm

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: strings
    - include: conditionals
    - include: macros
    - include: directives
    - include: names
    - include: numbers
    - include: keywords

  conditionals:
    - match: '\b#(if|ifdef|ifndef|for|end|begin|for|done)\b'
      scope: keyword.control.conditional

  macros:
    - match: '\b#[a-z]+\b'
      scope: keyword.other.glm

  directives:
    - match: '\b(clock|module|class|object|modify|global|filter|intrinsic|set|import|export|script|library|link|dump|extension|instance|schedule)\b'
      scope: keyword.directive.glm

  names:
    - match: '\b[A-Za-z_]+[-A-Za-z_:.0-9]*\b'
      scope: entity.name.glm

  numbers:
    - include: complex
    - include: reals
    - include: integers

  integers:
    - match: '\b[-+]?[0-9]+\b'
      scope: constant.numeric.integer.glm

  reals:
    - match: '\b[-+]?[0-9]+.[0-9]+(|[eE][-+]?[0-9]+)\b'
      scope: constant.numeric.float.glm

  complex:
    - match: '\b[-+]?[0-9]+.[0-9]+(|[eE][-+]?[0-9]+)[-+][0-9]+.[0-9]+(|[eE][-+]?[0-9]+)[ijrd]\b'
      scope: constant.numeric.complex.glm

  keywords:
    - match: '\b[A-Z0-9_]+\b'
      scope: entity.name.enum

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape character.
    - match: '"'
      scope: punctuation.definition.string.begin.glm
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.glm
    - match: '\.'
      scope: constant.character.escape.glm
    - match: '"'
      scope: punctuation.definition.string.end.glm
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.glm
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.glm
        - match: $\n?
          pop: true
