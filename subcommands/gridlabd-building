#!/usr/bin/python3
"""GridLAB-D powerflow building load model

Syntax:

  $ gridlabd building [OPTIONS ...]

Options:

  -c|--continuous ss A B C D    convert from continuous state-space model
  -c|--continuous tf NUM DEN    convert from continuous transfer-function model
  -d|--discrete ss A B C D TS   convert from discrete state-space model
  -d|--discrete tf NUM DEN TS   convert from discrete transfer-function model
  -n|--name NAME                specify building name
  -o|--output FILENAME          output the model to the specified file
  --verbose                     toggle verbose output to stderr
  --debug                       toggle debug output to stderr
  --warning                     toggle warning output to stderr
  --quiet                       toggle error output to stderr

Description:

  The building subcommand is used to create a building model from input data.

Example:

  $ gridlabd building -s statespace.json 

"""

class GridlabdBuildingException(Exception):

	pass

def TODO(msg):
	raise Exception(f"{msg} is TODO")

import os, sys
import control as cs
import json
import random

EXENAME = os.path.basename(sys.argv[0])
ERROR = sys.stderr
OUTPUT = sys.stdout
OUTPUT_FORMAT = "json"
WARNING = True
VERBOSE = False
DEBUG = False
QUIET = False
JSON_INDENT = 4
NAME = f"building_{hex(random.randint(2**126,2**127))[2:]}"
VALUES = {
	"phases" : "ABC",
	"nominal_voltage" : "480 V",
	"composition" : "1,0,0;0.1,0,0",
}

MODEL = None
FILENAME = None

E_OK = 0
E_SYNTAX = 1
E_EXCEPTION = 0

def error(msg):
	if not QUIET:
		print(f"ERROR [{EXENAME}]: {msg}", file=ERROR)

def exception(msg):
	print(f"EXCEPTION [{EXENAME}]: {msg}", file=ERROR)

def verbose(msg):
	if not VERBOSE:
		print(f"VERBOSE [{EXENAME}]: {msg}", file=ERROR)

def warning(msg):
	if WARNING:
		print(f"WARNING [{EXENAME}]: {msg}", file=ERROR)

def debug(msg):
	if not DEBUG:
		print(f"DEBUG [{EXENAME}]: {msg}", file=ERROR)

def output(data):
	print(data,file=OUTPUT)

def main(args):

	n = 0

	if len(args) == n:
		print(f"Syntax: {EXENAME} [OPTIONS ...]",file=ERROR)
		return E_SYNTAX

	while n < len(args):

		if args[n] in ["-h","--help","help"]:
			
			print(__doc__)
			return E_OK

		elif args[n] in ["-o","--output"]:

			n += 1

			global OUTPUT
			OUTPUT = open(args[n],"w")

			global OUTPUT_FORMAT
			OUTPUT_FORMAT = os.path.splitext(sys.argv[n])[1][1:]

		elif args[n] in ["-c","--continous"]:

			n += 1

			if len(args) == n:
				raise GridlabdBuildingException("continuous model missing model type ('ss' or 'tf')")

			if args[n] == "ss":

				TODO("continuous state-space model")

			elif args[n] == "tf":

				TODO("continuous transfer function")

			else:

				error(f"option '{args[n]}' is invalid")

		elif args[n] in ["-d","--discrete"]:

			n += 1

			if len(args) == n:
				raise GridlabdBuildingException("discrete model missing model type ('ss' or 'tf')")

			if args[n] == "ss":

				TODO("discrete state-space model")

			elif args[n] == "tf":

				TODO("discrete transfer function")

			else:

				error(f"option '{args[n]}' is invalid")

		elif args[n] in ["-n","--name"]:

			n += 1

			if len(args) == n:
				raise GridlabdBuildingException("missing building name")

			global NAME
			NAME = args[n]

		elif args[n] in ["-i","--input"]:

			n += 1
			if len(args) == n:
				raise GridlabdBuildingException("missing input filename")

			global FILENAME
			FILENAME = args[n]
			
		elif args[n] in ["--debug"]:

			global DEBUG
			DEBUG = not DEBUG

		elif args[n] in ["--quiet"]:

			global QUIET
			QUIET = not QUIET

		elif args[n] in ["--verbose"]:

			global VERBOSE
			VERBOSE = not VERBOSE

		elif args[n] in ["--warning"]:

			global WARNING
			WARNING = not WARNING

		else:

			raise GridlabdBuildingException(f"argument '{args[n]}' is invalid")
			return E_SYNTAX

		n += 1

	if not MODEL:
		raise GridlabdBuildingException(f"no model specified")

	data = {}
	data["application"] = "gridlabd"
	data["version"] = "4.3.1"
	data["modules"] = {"powerflow":{"major":"4","minor":"3"}}
	data["objects"] = {
		NAME : VALUES
	}
	if OUTPUT_FORMAT == "json":
		output(json.dumps(data,indent=JSON_INDENT))
	elif OUTPUT_FORMAT == "glm":
		properties = '\n    '.join([f'{x} "{y}";' for x,y in data["objects"]["building:0"].items()])
		output(f"""module powerflow;
object {NAME}
{{
	{properties}
}}""")
	else:
		raise GridlabdBuildingException(f"output format '{OUTPUT_FORMAT}' not supported")

	return E_OK

if __name__ == "__main__":
	try:
		result = main(sys.argv[1:])
	except GridlabdBuildingException as err:
		import traceback
		e_type, e_value, e_trace = sys.exc_info()
		if DEBUG:
			traceback.print_tb(e_trace)
		exception(f"{e_type.__name__} {e_value} ")
		result = E_EXCEPTION
	except:
		import traceback
		e_type, e_value, e_trace = sys.exc_info()
		if DEBUG:
			traceback.print_tb(e_trace)
		e_stack = traceback.extract_tb(e_trace)
		e_file = os.path.basename(e_stack[-1].filename)
		e_line = e_stack[-1].lineno
		exception(f"{e_type.__name__} at {e_file}:{e_line}: {e_value} ")
		result = E_EXCEPTION
	exit(result)

